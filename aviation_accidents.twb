<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20252.25.0818.1050                               -->
<workbook original-version='18.1' source-build='2025.2.2 (20252.25.0818.1050)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location id='aviation_accidents_17593280301830' path='/workbooks' revision='1.4' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='accidents_cleaned' inline='true' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='accidents_cleaned' name='textscan.1vtp64a1wecjst18fucvp024rut8'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data' filename='accidents_cleaned.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='type_counts' name='textscan.1bjg8tb1m218301506imz0hdelz6'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='type_counts.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='accidents_per_year' name='textscan.0ahnfex1lxgtvw1aonao01s6azwj'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='accidents_per_year.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='cat_counts' name='textscan.0sff6cs15846lq115a2ay0sctwjg'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='cat_counts.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='loc_counts' name='textscan.1mmwhzi0ogjgmp1cmrnfj19lnwx6'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='loc_counts.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='textscan.1vtp64a1wecjst18fucvp024rut8' name='accidents_cleaned.csv' table='[accidents_cleaned#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='date' ordinal='1' />
              <column datatype='string' name='type' ordinal='2' />
              <column datatype='string' name='registration' ordinal='3' />
              <column datatype='string' name='operator' ordinal='4' />
              <column datatype='real' name='fatalities' ordinal='5' />
              <column datatype='string' name='location' ordinal='6' />
              <column datatype='string' name='country' ordinal='7' />
              <column datatype='string' name='cat' ordinal='8' />
              <column datatype='integer' name='year' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.0ahnfex1lxgtvw1aonao01s6azwj' name='accidents_per_year.csv' table='[accidents_per_year#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='year' ordinal='0' />
              <column datatype='integer' name='count' ordinal='1' />
            </columns>
          </relation>
          <relation connection='textscan.0sff6cs15846lq115a2ay0sctwjg' name='cat_counts.csv' table='[cat_counts#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='cat' ordinal='0' />
              <column datatype='integer' name='count' ordinal='1' />
            </columns>
          </relation>
          <relation connection='textscan.1mmwhzi0ogjgmp1cmrnfj19lnwx6' name='loc_counts.csv' table='[loc_counts#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='location' ordinal='0' />
              <column datatype='integer' name='count' ordinal='1' />
            </columns>
          </relation>
          <relation connection='textscan.1bjg8tb1m218301506imz0hdelz6' name='type_counts.csv' table='[type_counts#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='type' ordinal='1' />
              <column datatype='integer' name='count' ordinal='2' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[F1 (type_counts.csv)]' value='[type_counts.csv].[F1]' />
          <map key='[F1]' value='[accidents_cleaned.csv].[F1]' />
          <map key='[cat (cat_counts.csv)]' value='[cat_counts.csv].[cat]' />
          <map key='[cat]' value='[accidents_cleaned.csv].[cat]' />
          <map key='[count (accidents_per_year.csv)]' value='[accidents_per_year.csv].[count]' />
          <map key='[count (cat_counts.csv)]' value='[cat_counts.csv].[count]' />
          <map key='[count (loc_counts.csv)]' value='[loc_counts.csv].[count]' />
          <map key='[count]' value='[type_counts.csv].[count]' />
          <map key='[country]' value='[accidents_cleaned.csv].[country]' />
          <map key='[date]' value='[accidents_cleaned.csv].[date]' />
          <map key='[fatalities]' value='[accidents_cleaned.csv].[fatalities]' />
          <map key='[location (loc_counts.csv)]' value='[loc_counts.csv].[location]' />
          <map key='[location]' value='[accidents_cleaned.csv].[location]' />
          <map key='[operator]' value='[accidents_cleaned.csv].[operator]' />
          <map key='[registration]' value='[accidents_cleaned.csv].[registration]' />
          <map key='[type (type_counts.csv)]' value='[type_counts.csv].[type]' />
          <map key='[type]' value='[accidents_cleaned.csv].[type]' />
          <map key='[year (accidents_per_year.csv)]' value='[accidents_per_year.csv].[year]' />
          <map key='[year]' value='[accidents_cleaned.csv].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[accidents_per_year.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[cat_counts.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[loc_counts.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>129</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>registration</remote-name>
            <remote-type>129</remote-type>
            <local-name>[registration]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>registration</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>operator</remote-name>
            <remote-type>129</remote-type>
            <local-name>[operator]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>operator</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fatalities</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fatalities]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>fatalities</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cat</remote-name>
            <remote-type>129</remote-type>
            <local-name>[cat]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>cat</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[year (accidents_per_year.csv)]</local-name>
            <parent-name>[accidents_per_year.csv]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count (accidents_per_year.csv)]</local-name>
            <parent-name>[accidents_per_year.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cat</remote-name>
            <remote-type>129</remote-type>
            <local-name>[cat (cat_counts.csv)]</local-name>
            <parent-name>[cat_counts.csv]</parent-name>
            <remote-alias>cat</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count (cat_counts.csv)]</local-name>
            <parent-name>[cat_counts.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location (loc_counts.csv)]</local-name>
            <parent-name>[loc_counts.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count (loc_counts.csv)]</local-name>
            <parent-name>[loc_counts.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1 (type_counts.csv)]</local-name>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[type (type_counts.csv)]</local-name>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count]</local-name>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='F1 (type counts.csv)' datatype='integer' name='[F1 (type_counts.csv)]' role='measure' type='quantitative' />
      <column caption='accidents_cleaned.csv' datatype='table' name='[__tableau_internal_object_id__].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' role='measure' type='quantitative' />
      <column caption='accidents_per_year.csv' datatype='table' name='[__tableau_internal_object_id__].[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]' role='measure' type='quantitative' />
      <column caption='cat_counts.csv' datatype='table' name='[__tableau_internal_object_id__].[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]' role='measure' type='quantitative' />
      <column caption='loc_counts.csv' datatype='table' name='[__tableau_internal_object_id__].[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]' role='measure' type='quantitative' />
      <column caption='type_counts.csv' datatype='table' name='[__tableau_internal_object_id__].[type_counts.csv_E183BA0088394869BD35E95012280CA0]' role='measure' type='quantitative' />
      <column caption='Cat (Cat Counts.Csv)' datatype='string' name='[cat (cat_counts.csv)]' role='dimension' type='nominal' />
      <column caption='Cat' datatype='string' name='[cat]' role='dimension' type='nominal' />
      <column caption='Count (Accidents Per Year.Csv)' datatype='integer' name='[count (accidents_per_year.csv)]' role='measure' type='quantitative' />
      <column caption='Count (Cat Counts.Csv)' datatype='integer' name='[count (cat_counts.csv)]' role='measure' type='quantitative' />
      <column caption='Count (Loc Counts.Csv)' datatype='integer' name='[count (loc_counts.csv)]' role='measure' type='quantitative' />
      <column caption='Count' datatype='integer' name='[count]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Date' datatype='string' name='[date]' role='dimension' type='nominal' />
      <column caption='Fatalities' datatype='real' name='[fatalities]' role='measure' type='quantitative' />
      <column caption='Location (Loc Counts.Csv)' datatype='string' name='[location (loc_counts.csv)]' role='dimension' type='nominal' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Operator' datatype='string' name='[operator]' role='dimension' type='nominal' />
      <column caption='Registration' datatype='string' name='[registration]' role='dimension' type='nominal' />
      <column caption='Type (Type Counts.Csv)' datatype='string' name='[type (type_counts.csv)]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      <column caption='Year (Accidents Per Year.Csv)' datatype='integer' name='[year (accidents_per_year.csv)]' role='dimension' type='quantitative' />
      <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/USER/AppData/Local/Temp/TableauTemp/#TableauTemp_1i0bkm112k63wi19dhlyu0zc3ukh.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='10/01/2025 03:30:17 PM' username='tableau_internal_user'>
          <relation type='collection'>
            <relation name='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' table='[Extract].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' type='table' />
            <relation name='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6' table='[Extract].[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]' type='table' />
            <relation name='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14' table='[Extract].[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]' type='table' />
            <relation name='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1' table='[Extract].[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]' type='table' />
            <relation name='type_counts.csv_E183BA0088394869BD35E95012280CA0' table='[Extract].[type_counts.csv_E183BA0088394869BD35E95012280CA0]' type='table' />
          </relation>
          <cols>
            <map key='[F1 (type_counts.csv)]' value='[type_counts.csv_E183BA0088394869BD35E95012280CA0].[F1]' />
            <map key='[F1]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[F1]' />
            <map key='[cat (cat_counts.csv)]' value='[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14].[cat]' />
            <map key='[cat]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[cat]' />
            <map key='[count (accidents_per_year.csv)]' value='[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6].[count]' />
            <map key='[count (cat_counts.csv)]' value='[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14].[count]' />
            <map key='[count (loc_counts.csv)]' value='[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1].[count]' />
            <map key='[count]' value='[type_counts.csv_E183BA0088394869BD35E95012280CA0].[count]' />
            <map key='[country]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[country]' />
            <map key='[date]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[date]' />
            <map key='[fatalities]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[fatalities]' />
            <map key='[location (loc_counts.csv)]' value='[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1].[location]' />
            <map key='[location]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[location]' />
            <map key='[operator]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[operator]' />
            <map key='[registration]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[registration]' />
            <map key='[type (type_counts.csv)]' value='[type_counts.csv_E183BA0088394869BD35E95012280CA0].[type]' />
            <map key='[type]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[type]' />
            <map key='[year (accidents_per_year.csv)]' value='[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6].[year]' />
            <map key='[year]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[year]' />
          </cols>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>22701</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>129</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>1</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>8148</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[type]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>type</remote-alias>
              <ordinal>2</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2061</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>registration</remote-name>
              <remote-type>129</remote-type>
              <local-name>[registration]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>registration</remote-alias>
              <ordinal>3</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>20962</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>operator</remote-name>
              <remote-type>129</remote-type>
              <local-name>[operator]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>operator</remote-alias>
              <ordinal>4</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2827</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>fatalities</remote-name>
              <remote-type>5</remote-type>
              <local-name>[fatalities]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>fatalities</remote-alias>
              <ordinal>5</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>163</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>6</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7433</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>7</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>327</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>cat</remote-name>
              <remote-type>129</remote-type>
              <local-name>[cat]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>cat</remote-alias>
              <ordinal>8</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>16</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[year]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>year</remote-alias>
              <ordinal>9</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>113</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[year (accidents_per_year.csv)]</local-name>
              <parent-name>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</parent-name>
              <remote-alias>year</remote-alias>
              <ordinal>10</ordinal>
              <family>accidents_per_year.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>106</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count (accidents_per_year.csv)]</local-name>
              <parent-name>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>11</ordinal>
              <family>accidents_per_year.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>80</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>cat</remote-name>
              <remote-type>129</remote-type>
              <local-name>[cat (cat_counts.csv)]</local-name>
              <parent-name>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</parent-name>
              <remote-alias>cat</remote-alias>
              <ordinal>12</ordinal>
              <family>cat_counts.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>11</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count (cat_counts.csv)]</local-name>
              <parent-name>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>13</ordinal>
              <family>cat_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>11</approx-count>
              <contains-null>true</contains-null>
              <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location (loc_counts.csv)]</local-name>
              <parent-name>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>14</ordinal>
              <family>loc_counts.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>14581</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count (loc_counts.csv)]</local-name>
              <parent-name>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>15</ordinal>
              <family>loc_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>46</approx-count>
              <contains-null>true</contains-null>
              <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[F1 (type_counts.csv)]</local-name>
              <parent-name>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>16</ordinal>
              <family>type_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3172</approx-count>
              <contains-null>true</contains-null>
              <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[type (type_counts.csv)]</local-name>
              <parent-name>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</parent-name>
              <remote-alias>type</remote-alias>
              <ordinal>17</ordinal>
              <family>type_counts.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3172</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count]</local-name>
              <parent-name>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>18</ordinal>
              <family>type_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>70</approx-count>
              <contains-null>true</contains-null>
              <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Isl.&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;?&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Caribbean Neth&apos;lands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mediterranean Sea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Arctic Ocean&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bosnia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad &amp; Tobago&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Christmas Isl.&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;D.R. Congo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pacific Ocean&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;U.S. Virgin Isl.&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cayman Isl.&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sao Tome&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;St.Pierre &amp; Miquelon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;U.K.&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cocos Isl.&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eq. Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Solomon Isl.&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Atlantic Ocean&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint BarthÃ©lemy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;St. Helena&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turks &amp; Caicos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Mariana Isl&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;St. Kitts &amp; Nevis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;B.V.I.&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czech Rep.&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indian Ocean&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;P.N. Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;U.S. M.O. Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cook Isl.&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antarctica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dominican Rep.&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;C.A.R.&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;CuraÃ§ao&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;St. Vincent&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;U.A.E.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Falkland Isl.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norfolk Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Kenya&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='accidents_cleaned.csv' id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E'>
            <properties context=''>
              <relation connection='textscan.1vtp64a1wecjst18fucvp024rut8' name='accidents_cleaned.csv' table='[accidents_cleaned#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='date' ordinal='1' />
                  <column datatype='string' name='type' ordinal='2' />
                  <column datatype='string' name='registration' ordinal='3' />
                  <column datatype='string' name='operator' ordinal='4' />
                  <column datatype='real' name='fatalities' ordinal='5' />
                  <column datatype='string' name='location' ordinal='6' />
                  <column datatype='string' name='country' ordinal='7' />
                  <column datatype='string' name='cat' ordinal='8' />
                  <column datatype='integer' name='year' ordinal='9' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' table='[Extract].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' type='table' />
            </properties>
          </object>
          <object caption='accidents_per_year.csv' id='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6'>
            <properties context=''>
              <relation connection='textscan.0ahnfex1lxgtvw1aonao01s6azwj' name='accidents_per_year.csv' table='[accidents_per_year#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='year' ordinal='0' />
                  <column datatype='integer' name='count' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6' table='[Extract].[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]' type='table' />
            </properties>
          </object>
          <object caption='cat_counts.csv' id='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14'>
            <properties context=''>
              <relation connection='textscan.0sff6cs15846lq115a2ay0sctwjg' name='cat_counts.csv' table='[cat_counts#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='cat' ordinal='0' />
                  <column datatype='integer' name='count' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14' table='[Extract].[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]' type='table' />
            </properties>
          </object>
          <object caption='loc_counts.csv' id='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1'>
            <properties context=''>
              <relation connection='textscan.1mmwhzi0ogjgmp1cmrnfj19lnwx6' name='loc_counts.csv' table='[loc_counts#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='location' ordinal='0' />
                  <column datatype='integer' name='count' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1' table='[Extract].[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]' type='table' />
            </properties>
          </object>
          <object caption='type_counts.csv' id='type_counts.csv_E183BA0088394869BD35E95012280CA0'>
            <properties context=''>
              <relation connection='textscan.1bjg8tb1m218301506imz0hdelz6' name='type_counts.csv' table='[type_counts#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='type' ordinal='1' />
                  <column datatype='integer' name='count' ordinal='2' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='type_counts.csv_E183BA0088394869BD35E95012280CA0' table='[Extract].[type_counts.csv_E183BA0088394869BD35E95012280CA0]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[year]' />
              <expression op='[year (accidents_per_year.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[cat]' />
              <expression op='[cat (cat_counts.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[location]' />
              <expression op='[location (loc_counts.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[type]' />
              <expression op='[type (type_counts.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='type_counts.csv_E183BA0088394869BD35E95012280CA0' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Accidents Per Category'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Cat' datatype='string' name='[cat]' role='dimension' type='nominal' />
            <column caption='Count (Cat Counts.Csv)' datatype='integer' name='[count (cat_counts.csv)]' role='measure' type='quantitative' />
            <column-instance column='[cat]' derivation='None' name='[none:cat:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[count (cat_counts.csv)]' derivation='Sum' name='[sum:count (cat_counts.csv):qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (cat_counts.csv):qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (cat_counts.csv):qk]</cols>
      </table>
      <simple-id uuid='{D100ED44-0264-420B-AF1F-99FDA4DEDD21}' />
    </worksheet>
    <worksheet name='Accidents Per Type'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='accidents_cleaned.csv' datatype='table' name='[__tableau_internal_object_id__].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' role='measure' type='quantitative' />
            <column caption='Count' datatype='integer' name='[count]' role='measure' type='quantitative' />
            <column-instance column='[type (type_counts.csv)]' derivation='None' name='[none:type (type_counts.csv):nk]' pivot='key' type='nominal' />
            <column-instance column='[count]' derivation='Sum' name='[sum:count:qk]' pivot='key' type='quantitative' />
            <column caption='Type (Type Counts.Csv)' datatype='string' name='[type (type_counts.csv)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]'>
            <groupfilter expression='COUNT([__tableau_internal_object_id__].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]) &lt; 5' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:type (type_counts.csv):nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count:qk]</cols>
      </table>
      <simple-id uuid='{E65B7494-E510-4828-BCEA-BFCC6E843434}' />
    </worksheet>
    <worksheet name='Accidents Per Year'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Accidents Per Year&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Count (Accidents Per Year.Csv)' datatype='integer' name='[count (accidents_per_year.csv)]' role='measure' type='quantitative' />
            <column-instance column='[count (accidents_per_year.csv)]' derivation='None' name='[none:count (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column-instance column='[year (accidents_per_year.csv)]' derivation='None' name='[none:year (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column-instance column='[count (accidents_per_year.csv)]' derivation='Sum' name='[sum:count (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column caption='Year (Accidents Per Year.Csv)' datatype='integer' name='[year (accidents_per_year.csv)]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:count (accidents_per_year.csv):qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]' included-values='non-null' />
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:count (accidents_per_year.csv):qk]</column>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (accidents_per_year.csv):qk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</cols>
      </table>
      <simple-id uuid='{7F34D196-DA87-4D5C-8884-12194E8F7AEA}' />
    </worksheet>
    <worksheet name='Bar graph of accidents per country'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Count (Loc Counts.Csv)' datatype='integer' name='[count (loc_counts.csv)]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[count (loc_counts.csv)]' derivation='Sum' name='[sum:count (loc_counts.csv):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' shelf='rows' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]</cols>
      </table>
      <simple-id uuid='{C094D73C-78DD-4565-BDEE-E328072D5CFE}' />
    </worksheet>
    <worksheet name='Fatalities per Category'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Cat' datatype='string' name='[cat]' role='dimension' type='nominal' />
            <column caption='Fatalities' datatype='real' name='[fatalities]' role='measure' type='quantitative' />
            <column-instance column='[cat]' derivation='None' name='[none:cat:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[fatalities]' derivation='Sum' name='[sum:fatalities:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:fatalities:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' value='#fefaf1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:fatalities:qk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</cols>
      </table>
      <simple-id uuid='{DE5D5F24-6190-409A-A433-ACCDEF66753B}' />
    </worksheet>
    <worksheet name='Map of Accidents Per Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Count (Loc Counts.Csv)' datatype='integer' name='[count (loc_counts.csv)]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[year (accidents_per_year.csv)]' derivation='None' name='[none:year (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column-instance column='[count (loc_counts.csv)]' derivation='Sum' name='[sum:count (loc_counts.csv):qk]' pivot='key' type='quantitative' />
            <column caption='Year (Accidents Per Year.Csv)' datatype='integer' name='[year (accidents_per_year.csv)]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]'>
            <groupfilter function='level-members' level='[none:country:nk]' />
          </filter>
          <filter class='quantitative' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]' included-values='in-range'>
            <min>1934</min>
            <max>1945</max>
          </filter>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</column>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Longitude (generated)]' field-type='quantitative' max='7679940.1752377972' min='-47053844.10323558' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Latitude (generated)]' field-type='quantitative' max='19614225.282211639' min='-10781624.256499432' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' />
              <text column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' />
              <lod column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' />
              <size column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Latitude (generated)]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{17968F59-6C02-441A-8678-5208FCB5FA7E}' />
    </worksheet>
    <worksheet name='Total Number Of Fatalitites'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontsize='12'>Total Number Of Fatalities</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Fatalities' datatype='real' name='[fatalities]' role='measure' type='quantitative' />
            <column-instance column='[fatalities]' derivation='Sum' name='[sum:fatalities:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:fatalities:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7B2FE773-DCDE-45F3-8704-E43A7E139E7F}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='768' maxwidth='1366' minheight='768' minwidth='1366' preset-index='0' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='97916' id='7' param='horz' type-v2='layout-flow' w='98828' x='586' y='1042'>
            <zone h='97916' id='5' type-v2='layout-basic' w='98828' x='586' y='1042'>
              <zone h='48958' id='3' name='Accidents Per Type' w='49414' x='586' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='9' name='Map of Accidents Per Country' w='49414' x='50000' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='13' name='Accidents Per Year' w='49414' x='586' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='18' name='Total Number Of Fatalitites' w='24707' x='50000' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='19' name='Accidents Per Category' w='24707' x='74707' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1450' minheight='1450' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='31' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='97916' id='30' param='vert' type-v2='layout-flow' w='98828' x='586' y='1042'>
                <zone fixed-size='280' h='48958' id='3' is-fixed='true' name='Accidents Per Type' w='49414' x='586' y='1042'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='18' is-fixed='true' name='Total Number Of Fatalitites' w='24707' x='50000' y='1042'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='19' is-fixed='true' name='Accidents Per Category' w='24707' x='74707' y='1042'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='13' is-fixed='true' name='Accidents Per Year' w='49414' x='586' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='9' is-fixed='true' name='Map of Accidents Per Country' w='49414' x='50000' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B440FFA6-877C-4DBF-A615-16AE7B5E6151}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='Accidents Per Type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='typeinlist' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0FBF5AB0-4008-4525-848F-B62B277F99C0}' />
    </window>
    <window class='worksheet' name='Map of Accidents Per Country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='200'>
            <card param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' type='size' />
            <card pane-specification-id='0' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:location:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{9697BF79-8EE6-4E9D-B575-9D7BE59594CB}' />
    </window>
    <window class='worksheet' name='Accidents Per Year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:count (accidents_per_year.csv):qk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{310DF04E-3617-492F-AE70-941C62DE6D8A}' />
    </window>
    <window class='worksheet' name='Accidents Per Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (cat_counts.csv):qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EABF9B78-C6DA-425F-BE4D-04E431C43E7E}' />
    </window>
    <window class='worksheet' name='Fatalities per Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{90D71275-3D44-44B3-A97C-30BF2F9DCEC8}' />
    </window>
    <window class='worksheet' name='Total Number Of Fatalitites'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{B3B30BBB-C4C7-465B-AE18-361E723C0032}' />
    </window>
    <window class='worksheet' name='Bar graph of accidents per country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{39FBD0AE-149D-44A9-9242-445DCDCA60D0}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Accidents Per Category' />
        <viewpoint name='Accidents Per Type' />
        <viewpoint name='Accidents Per Year'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Map of Accidents Per Country'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Total Number Of Fatalitites' />
      </viewpoints>
      <active id='18' />
      <simple-id uuid='{EAF62A48-F9D0-4E1F-94D1-810A29FD7DE4}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Accidents Per Category' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Accidents Per Type' width='192'>
      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
      xYsAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Accidents Per Year' width='192'>
      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
      saWxBGCxpfn/7K0aTIBKvzUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Bar graph of accidents per country' width='192'>
      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
      RK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Fatalities per Category' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Map of Accidents Per Country' width='192'>
      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
    </thumbnail>
    <thumbnail height='29' name='Total Number Of Fatalitites' width='84'>
      iVBORw0KGgoAAAANSUhEUgAAAFQAAAAdCAYAAAA0PEtlAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAFFUlEQVRoge2ab0wTdxjHvxri0JIOHAq6+K9bZIGwzdFth8Nu1dhkqwNdCWYUKoGpbGZT
      mbrNRCJqQtAMWNAAC9sg8QVEligCM4pkbJGmWkFwLIBioKjQCShn22Hp8uwFhV3ba7VwAbL0
      86r3/J57vs99r3f3XNM5RETwIRhzZ7qB/xs+QwXGZ6jA+AwVGJ+hAuMzVGB8hgqMz1CB8Rkq
      MD5DBcZnqMD4DBWYWW2ozcLCYpvpLrjYYGEt8NSSIIZaey8hb8cmbCvrcdvIUPt5ZKcqIY+W
      QiqVQrpOgdTMKnRaXbPZ1jLs27wOjGw9ZEw05Ml5aBx6Fme90+HSU7ELsbGxiM3T8RxgJ6oy
      kyGPZiBbLwMTLUdydj36+FqiKTA62ESlX8ZRTEwcJcXLKbG0myfLRPrceIpRbqfcqpt03zxK
      RERPjDepYr+CmPRK6ufW7ColDaOg/VUGejImQk0nNcQojtAVk6duvNNxoL+S0mMyKP/bBIrK
      bHA6yC4q1cRQ/JGLZHhC9prX6KSGIUVmAw07lZq8oXdPk4ZR0vbcMaHu0kQ3hnbT2aKqiWYc
      m9VRtjyBfugaD5jown6Gtpxso1GHxGGqyWBoS1GHh4a80eHST5XpMZRRM0zdpYkuhg5UphOT
      UeNiHA1fpoNyBR3XO3Y6+Us+8H2cuHwW3+/diGXzPCWuQNzOD/lz/IKxeJEFf4/Yt80NuFgf
      ga3x4fBzSBRDEadA329auLupeKXDga09jnzswYEPxLxV21qvYe2Gd+GyKl4PtWoefqlvcQhP
      3lDRQixe4Pf0PA9YW8+j+sE7eHO1PdDehuYlaxAZ4prrF/U21nZ0omsSDykXnXHYWmRlW7Dn
      sAo8khP4+z/HGw+PfAPsH+24x4nN0FPehqHGE1DvrEXk4c/w1vh5MZvALgzE83y7iAIQgG70
      3uNb9FIHAMCiPuc7DKR/DZUHN0OXLof2ahP/k32FBGG999HPCU2/odZeXDr6MZRZBmwqPoMs
      mdPFtHIZXpwGHbY+Bzl3NTiiXuGxzOrNaoSdO4S9Zc34b9Cwgr39O8qKqnGHNcHMyZ/aNesF
      7NUTSNtdh1UHS3Ds0Blo+ZJEARC338YdyCBxXrPZYEMoFgVPVceMxqMf4WD/FnyTHIJbdXW4
      ZV8ZuMUCxhbU1VmBgJcQzayCKESFQq1qLMHKYmAAEAeLIX55HdQbL6Dg0auI4FSfHkONP+Or
      3XUIz+H5RnJZKUFYVyPazYBE5LTWch3aJRKoneNe64yAQmXYOHcQet2gw4rJYAYet0OnY4HF
      87GGWQUHuXliBE+cUBuarmqx/PVteIGb42EO8Qr3Y9Mo6bLlPKMQH/1UnhZFaeXOE+NYDUXu
      DQ/7eqPDD9/Y5JbhGspg0si51Wm4h7ag4aIIG+TOoxAfIVB9uhW9+Qfw48SrjQ1D9Udx6FwY
      diS+5pBtvn4aHZPS8YYetOr/AvdFyzbUjFOfZ6M3JcPlgTZp7Z4yNVQFHU5RFaQF45+VyNVn
      QQYzTGwfKjRS/OSmljJXjyyZvaGovSjctw9fbNuA8kVB8P/nMR6wEqQU5zk1b0R1YT7eK0my
      b3un8+w8wpVjSUgdnI+lQf4ARvDwwSgiUk6hZKfryZtDNDv/OWKzPET3n9fxKDAK4SuD4DLy
      GivwyeZfUaItnJZ+rOwADJ03YPR/BeGSUAS5mcFnraFPo7M4AXnBBSj0NETOALP65zv33IVh
      wS4cnmVmAsC/++ELhwA2a2YAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
