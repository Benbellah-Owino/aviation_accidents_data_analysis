<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20252.25.0818.1050                               -->
<workbook original-version='18.1' source-build='2025.2.2 (20252.25.0818.1050)' source-platform='win' version='18.1' xml:base='https://public.tableau.com' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <AccessibleZoneTabOrder />
    <AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <IntuitiveSorting />
    <IntuitiveSorting_SP2 />
    <MapboxVectorStylesAndLayers />
    <MarkAnimation />
    <ObjectModelEncapsulateLegacy />
    <ObjectModelExtractV2 />
    <ObjectModelTableType />
    <SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <_.fcp.VConnDownstreamExtractsWithWarnings.true...VConnDownstreamExtractsWithWarnings />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <repository-location id='aviation_accidents_17593280301830' path='/workbooks' revision='1.1' />
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='accidents_cleaned' inline='true' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='accidents_cleaned' name='textscan.1vtp64a1wecjst18fucvp024rut8'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data' filename='accidents_cleaned.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='type_counts' name='textscan.1bjg8tb1m218301506imz0hdelz6'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='type_counts.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='accidents_per_year' name='textscan.0ahnfex1lxgtvw1aonao01s6azwj'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='accidents_per_year.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='cat_counts' name='textscan.0sff6cs15846lq115a2ay0sctwjg'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='cat_counts.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
          <named-connection caption='loc_counts' name='textscan.1mmwhzi0ogjgmp1cmrnfj19lnwx6'>
            <connection class='textscan' directory='C:/Users/USER/SW WORKSHOP/DataScience/MORINGA/projects/phase1/accidents/data/viz' filename='loc_counts.csv' password='' server='' workgroup-auth-mode='as-is' />
          </named-connection>
        </named-connections>
        <relation type='collection'>
          <relation connection='textscan.1vtp64a1wecjst18fucvp024rut8' name='accidents_cleaned.csv' table='[accidents_cleaned#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='date' ordinal='1' />
              <column datatype='string' name='type' ordinal='2' />
              <column datatype='string' name='registration' ordinal='3' />
              <column datatype='string' name='operator' ordinal='4' />
              <column datatype='real' name='fatalities' ordinal='5' />
              <column datatype='string' name='location' ordinal='6' />
              <column datatype='string' name='country' ordinal='7' />
              <column datatype='string' name='cat' ordinal='8' />
              <column datatype='integer' name='year' ordinal='9' />
            </columns>
          </relation>
          <relation connection='textscan.0ahnfex1lxgtvw1aonao01s6azwj' name='accidents_per_year.csv' table='[accidents_per_year#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='year' ordinal='0' />
              <column datatype='integer' name='count' ordinal='1' />
            </columns>
          </relation>
          <relation connection='textscan.0sff6cs15846lq115a2ay0sctwjg' name='cat_counts.csv' table='[cat_counts#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='cat' ordinal='0' />
              <column datatype='integer' name='count' ordinal='1' />
            </columns>
          </relation>
          <relation connection='textscan.1mmwhzi0ogjgmp1cmrnfj19lnwx6' name='loc_counts.csv' table='[loc_counts#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='location' ordinal='0' />
              <column datatype='integer' name='count' ordinal='1' />
            </columns>
          </relation>
          <relation connection='textscan.1bjg8tb1m218301506imz0hdelz6' name='type_counts.csv' table='[type_counts#csv]' type='table'>
            <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='type' ordinal='1' />
              <column datatype='integer' name='count' ordinal='2' />
            </columns>
          </relation>
        </relation>
        <cols>
          <map key='[F1 (type_counts.csv)]' value='[type_counts.csv].[F1]' />
          <map key='[F1]' value='[accidents_cleaned.csv].[F1]' />
          <map key='[cat (cat_counts.csv)]' value='[cat_counts.csv].[cat]' />
          <map key='[cat]' value='[accidents_cleaned.csv].[cat]' />
          <map key='[count (accidents_per_year.csv)]' value='[accidents_per_year.csv].[count]' />
          <map key='[count (cat_counts.csv)]' value='[cat_counts.csv].[count]' />
          <map key='[count (loc_counts.csv)]' value='[loc_counts.csv].[count]' />
          <map key='[count]' value='[type_counts.csv].[count]' />
          <map key='[country]' value='[accidents_cleaned.csv].[country]' />
          <map key='[date]' value='[accidents_cleaned.csv].[date]' />
          <map key='[fatalities]' value='[accidents_cleaned.csv].[fatalities]' />
          <map key='[location (loc_counts.csv)]' value='[loc_counts.csv].[location]' />
          <map key='[location]' value='[accidents_cleaned.csv].[location]' />
          <map key='[operator]' value='[accidents_cleaned.csv].[operator]' />
          <map key='[registration]' value='[accidents_cleaned.csv].[registration]' />
          <map key='[type (type_counts.csv)]' value='[type_counts.csv].[type]' />
          <map key='[type]' value='[accidents_cleaned.csv].[type]' />
          <map key='[year (accidents_per_year.csv)]' value='[accidents_per_year.csv].[year]' />
          <map key='[year]' value='[accidents_cleaned.csv].[year]' />
        </cols>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[accidents_per_year.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[cat_counts.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[loc_counts.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>date</remote-name>
            <remote-type>129</remote-type>
            <local-name>[date]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>date</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[type]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>registration</remote-name>
            <remote-type>129</remote-type>
            <local-name>[registration]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>registration</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>operator</remote-name>
            <remote-type>129</remote-type>
            <local-name>[operator]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>operator</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>fatalities</remote-name>
            <remote-type>5</remote-type>
            <local-name>[fatalities]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>fatalities</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[country]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>country</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cat</remote-name>
            <remote-type>129</remote-type>
            <local-name>[cat]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>cat</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[year]</local-name>
            <parent-name>[accidents_cleaned.csv]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>year</remote-name>
            <remote-type>20</remote-type>
            <local-name>[year (accidents_per_year.csv)]</local-name>
            <parent-name>[accidents_per_year.csv]</parent-name>
            <remote-alias>year</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count (accidents_per_year.csv)]</local-name>
            <parent-name>[accidents_per_year.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>cat</remote-name>
            <remote-type>129</remote-type>
            <local-name>[cat (cat_counts.csv)]</local-name>
            <parent-name>[cat_counts.csv]</parent-name>
            <remote-alias>cat</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count (cat_counts.csv)]</local-name>
            <parent-name>[cat_counts.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>location</remote-name>
            <remote-type>129</remote-type>
            <local-name>[location (loc_counts.csv)]</local-name>
            <parent-name>[loc_counts.csv]</parent-name>
            <remote-alias>location</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count (loc_counts.csv)]</local-name>
            <parent-name>[loc_counts.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1 (type_counts.csv)]</local-name>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>type</remote-name>
            <remote-type>129</remote-type>
            <local-name>[type (type_counts.csv)]</local-name>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias>type</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>count</remote-name>
            <remote-type>20</remote-type>
            <local-name>[count]</local-name>
            <parent-name>[type_counts.csv]</parent-name>
            <remote-alias>count</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='F1 (type counts.csv)' datatype='integer' name='[F1 (type_counts.csv)]' role='measure' type='quantitative' />
      <column caption='accidents_cleaned.csv' datatype='table' name='[__tableau_internal_object_id__].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' role='measure' type='quantitative' />
      <column caption='accidents_per_year.csv' datatype='table' name='[__tableau_internal_object_id__].[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]' role='measure' type='quantitative' />
      <column caption='cat_counts.csv' datatype='table' name='[__tableau_internal_object_id__].[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]' role='measure' type='quantitative' />
      <column caption='loc_counts.csv' datatype='table' name='[__tableau_internal_object_id__].[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]' role='measure' type='quantitative' />
      <column caption='type_counts.csv' datatype='table' name='[__tableau_internal_object_id__].[type_counts.csv_E183BA0088394869BD35E95012280CA0]' role='measure' type='quantitative' />
      <column caption='Cat (Cat Counts.Csv)' datatype='string' name='[cat (cat_counts.csv)]' role='dimension' type='nominal' />
      <column caption='Cat' datatype='string' name='[cat]' role='dimension' type='nominal' />
      <column caption='Count (Accidents Per Year.Csv)' datatype='integer' name='[count (accidents_per_year.csv)]' role='measure' type='quantitative' />
      <column caption='Count (Cat Counts.Csv)' datatype='integer' name='[count (cat_counts.csv)]' role='measure' type='quantitative' />
      <column caption='Count (Loc Counts.Csv)' datatype='integer' name='[count (loc_counts.csv)]' role='measure' type='quantitative' />
      <column caption='Count' datatype='integer' name='[count]' role='measure' type='quantitative' />
      <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column caption='Date' datatype='string' name='[date]' role='dimension' type='nominal' />
      <column caption='Fatalities' datatype='real' name='[fatalities]' role='measure' type='quantitative' />
      <column caption='Location (Loc Counts.Csv)' datatype='string' name='[location (loc_counts.csv)]' role='dimension' type='nominal' />
      <column caption='Location' datatype='string' name='[location]' role='dimension' type='nominal' />
      <column caption='Operator' datatype='string' name='[operator]' role='dimension' type='nominal' />
      <column caption='Registration' datatype='string' name='[registration]' role='dimension' type='nominal' />
      <column caption='Type (Type Counts.Csv)' datatype='string' name='[type (type_counts.csv)]' role='dimension' type='nominal' />
      <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
      <column caption='Year (Accidents Per Year.Csv)' datatype='integer' name='[year (accidents_per_year.csv)]' role='dimension' type='quantitative' />
      <column caption='Year' datatype='integer' name='[year]' role='dimension' type='quantitative' />
      <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
      <extract _.fcp.VConnDownstreamExtractsWithWarnings.true...user-specific='false' count='-1' enabled='true' object-id='' units='records'>
        <connection access_mode='readonly' author-locale='en_US' class='hyper' dbname='C:/Users/USER/AppData/Local/Temp/TableauTemp/#TableauTemp_1i0bkm112k63wi19dhlyu0zc3ukh.hyper' default-settings='hyper' schema='Extract' sslmode='' tablename='Extract' update-time='10/01/2025 03:30:17 PM' username='tableau_internal_user'>
          <relation type='collection'>
            <relation name='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' table='[Extract].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' type='table' />
            <relation name='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6' table='[Extract].[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]' type='table' />
            <relation name='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14' table='[Extract].[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]' type='table' />
            <relation name='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1' table='[Extract].[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]' type='table' />
            <relation name='type_counts.csv_E183BA0088394869BD35E95012280CA0' table='[Extract].[type_counts.csv_E183BA0088394869BD35E95012280CA0]' type='table' />
          </relation>
          <cols>
            <map key='[F1 (type_counts.csv)]' value='[type_counts.csv_E183BA0088394869BD35E95012280CA0].[F1]' />
            <map key='[F1]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[F1]' />
            <map key='[cat (cat_counts.csv)]' value='[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14].[cat]' />
            <map key='[cat]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[cat]' />
            <map key='[count (accidents_per_year.csv)]' value='[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6].[count]' />
            <map key='[count (cat_counts.csv)]' value='[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14].[count]' />
            <map key='[count (loc_counts.csv)]' value='[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1].[count]' />
            <map key='[count]' value='[type_counts.csv_E183BA0088394869BD35E95012280CA0].[count]' />
            <map key='[country]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[country]' />
            <map key='[date]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[date]' />
            <map key='[fatalities]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[fatalities]' />
            <map key='[location (loc_counts.csv)]' value='[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1].[location]' />
            <map key='[location]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[location]' />
            <map key='[operator]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[operator]' />
            <map key='[registration]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[registration]' />
            <map key='[type (type_counts.csv)]' value='[type_counts.csv_E183BA0088394869BD35E95012280CA0].[type]' />
            <map key='[type]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[type]' />
            <map key='[year (accidents_per_year.csv)]' value='[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6].[year]' />
            <map key='[year]' value='[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E].[year]' />
          </cols>
          <metadata-records>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[F1]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>0</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>22701</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>date</remote-name>
              <remote-type>129</remote-type>
              <local-name>[date]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>date</remote-alias>
              <ordinal>1</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>8148</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[type]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>type</remote-alias>
              <ordinal>2</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2061</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>registration</remote-name>
              <remote-type>129</remote-type>
              <local-name>[registration]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>registration</remote-alias>
              <ordinal>3</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>20962</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>operator</remote-name>
              <remote-type>129</remote-type>
              <local-name>[operator]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>operator</remote-alias>
              <ordinal>4</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>2827</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>fatalities</remote-name>
              <remote-type>5</remote-type>
              <local-name>[fatalities]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>fatalities</remote-alias>
              <ordinal>5</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>real</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>163</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>6</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>7433</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>country</remote-name>
              <remote-type>129</remote-type>
              <local-name>[country]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>country</remote-alias>
              <ordinal>7</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>327</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>cat</remote-name>
              <remote-type>129</remote-type>
              <local-name>[cat]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>cat</remote-alias>
              <ordinal>8</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>16</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[year]</local-name>
              <parent-name>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</parent-name>
              <remote-alias>year</remote-alias>
              <ordinal>9</ordinal>
              <family>accidents_cleaned.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>113</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>year</remote-name>
              <remote-type>20</remote-type>
              <local-name>[year (accidents_per_year.csv)]</local-name>
              <parent-name>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</parent-name>
              <remote-alias>year</remote-alias>
              <ordinal>10</ordinal>
              <family>accidents_per_year.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>106</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count (accidents_per_year.csv)]</local-name>
              <parent-name>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>11</ordinal>
              <family>accidents_per_year.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>80</approx-count>
              <contains-null>true</contains-null>
              <object-id>[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>cat</remote-name>
              <remote-type>129</remote-type>
              <local-name>[cat (cat_counts.csv)]</local-name>
              <parent-name>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</parent-name>
              <remote-alias>cat</remote-alias>
              <ordinal>12</ordinal>
              <family>cat_counts.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>11</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count (cat_counts.csv)]</local-name>
              <parent-name>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>13</ordinal>
              <family>cat_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>11</approx-count>
              <contains-null>true</contains-null>
              <object-id>[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>location</remote-name>
              <remote-type>129</remote-type>
              <local-name>[location (loc_counts.csv)]</local-name>
              <parent-name>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</parent-name>
              <remote-alias>location</remote-alias>
              <ordinal>14</ordinal>
              <family>loc_counts.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>14581</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count (loc_counts.csv)]</local-name>
              <parent-name>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>15</ordinal>
              <family>loc_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>46</approx-count>
              <contains-null>true</contains-null>
              <object-id>[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>F1</remote-name>
              <remote-type>20</remote-type>
              <local-name>[F1 (type_counts.csv)]</local-name>
              <parent-name>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</parent-name>
              <remote-alias>F1</remote-alias>
              <ordinal>16</ordinal>
              <family>type_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>3172</approx-count>
              <contains-null>true</contains-null>
              <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>type</remote-name>
              <remote-type>129</remote-type>
              <local-name>[type (type_counts.csv)]</local-name>
              <parent-name>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</parent-name>
              <remote-alias>type</remote-alias>
              <ordinal>17</ordinal>
              <family>type_counts.csv</family>
              <local-type>string</local-type>
              <aggregation>Count</aggregation>
              <approx-count>3172</approx-count>
              <contains-null>true</contains-null>
              <collation flag='0' name='LEN_RUS' />
              <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
            </metadata-record>
            <metadata-record class='column'>
              <remote-name>count</remote-name>
              <remote-type>20</remote-type>
              <local-name>[count]</local-name>
              <parent-name>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</parent-name>
              <remote-alias>count</remote-alias>
              <ordinal>18</ordinal>
              <family>type_counts.csv</family>
              <local-type>integer</local-type>
              <aggregation>Sum</aggregation>
              <approx-count>70</approx-count>
              <contains-null>true</contains-null>
              <object-id>[type_counts.csv_E183BA0088394869BD35E95012280CA0]</object-id>
            </metadata-record>
          </metadata-records>
        </connection>
      </extract>
      <layout dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Antigua&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Marshall Isl.&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;?&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Caribbean Neth&apos;lands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;American Samoa&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cote d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mediterranean Sea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;North Korea&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Arctic Ocean&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bosnia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Reunion&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;South Korea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad &amp; Tobago&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Christmas Isl.&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;D.R. Congo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Pacific Ocean&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;U.S. Virgin Isl.&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cayman Isl.&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Macau&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Sao Tome&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;St.Pierre &amp; Miquelon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;U.K.&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cocos Isl.&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eq. Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guam&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Solomon Isl.&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Timor&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Atlantic Ocean&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint BarthÃ©lemy&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;St. Helena&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Turks &amp; Caicos&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Northern Mariana Isl&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;St. Kitts &amp; Nevis&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;B.V.I.&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Czech Rep.&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Indian Ocean&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;P.N. Guinea&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;U.S. M.O. Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Cape Verde&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cook Isl.&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kosovo&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Antarctica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Puerto Rico&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Dominican Rep.&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;C.A.R.&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;CuraÃ§ao&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;St. Vincent&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;U.A.E.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Falkland Isl.&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Norfolk Island&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Kenya&quot;' />
      </semantic-values>
      <object-graph>
        <objects>
          <object caption='accidents_cleaned.csv' id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E'>
            <properties context=''>
              <relation connection='textscan.1vtp64a1wecjst18fucvp024rut8' name='accidents_cleaned.csv' table='[accidents_cleaned#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='date' ordinal='1' />
                  <column datatype='string' name='type' ordinal='2' />
                  <column datatype='string' name='registration' ordinal='3' />
                  <column datatype='string' name='operator' ordinal='4' />
                  <column datatype='real' name='fatalities' ordinal='5' />
                  <column datatype='string' name='location' ordinal='6' />
                  <column datatype='string' name='country' ordinal='7' />
                  <column datatype='string' name='cat' ordinal='8' />
                  <column datatype='integer' name='year' ordinal='9' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' table='[Extract].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' type='table' />
            </properties>
          </object>
          <object caption='accidents_per_year.csv' id='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6'>
            <properties context=''>
              <relation connection='textscan.0ahnfex1lxgtvw1aonao01s6azwj' name='accidents_per_year.csv' table='[accidents_per_year#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='year' ordinal='0' />
                  <column datatype='integer' name='count' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6' table='[Extract].[accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6]' type='table' />
            </properties>
          </object>
          <object caption='cat_counts.csv' id='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14'>
            <properties context=''>
              <relation connection='textscan.0sff6cs15846lq115a2ay0sctwjg' name='cat_counts.csv' table='[cat_counts#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='cat' ordinal='0' />
                  <column datatype='integer' name='count' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14' table='[Extract].[cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14]' type='table' />
            </properties>
          </object>
          <object caption='loc_counts.csv' id='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1'>
            <properties context=''>
              <relation connection='textscan.1mmwhzi0ogjgmp1cmrnfj19lnwx6' name='loc_counts.csv' table='[loc_counts#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='string' name='location' ordinal='0' />
                  <column datatype='integer' name='count' ordinal='1' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1' table='[Extract].[loc_counts.csv_ECE44508DD804D28B9D69029B63149E1]' type='table' />
            </properties>
          </object>
          <object caption='type_counts.csv' id='type_counts.csv_E183BA0088394869BD35E95012280CA0'>
            <properties context=''>
              <relation connection='textscan.1bjg8tb1m218301506imz0hdelz6' name='type_counts.csv' table='[type_counts#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='type' ordinal='1' />
                  <column datatype='integer' name='count' ordinal='2' />
                </columns>
              </relation>
            </properties>
            <properties context='extract'>
              <relation name='type_counts.csv_E183BA0088394869BD35E95012280CA0' table='[Extract].[type_counts.csv_E183BA0088394869BD35E95012280CA0]' type='table' />
            </properties>
          </object>
        </objects>
        <relationships>
          <relationship>
            <expression op='='>
              <expression op='[year]' />
              <expression op='[year (accidents_per_year.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='accidents_per_year.csv_0CA3CA45A2CF42FA92E0876A28D377D6' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[cat]' />
              <expression op='[cat (cat_counts.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='cat_counts.csv_D11253BDD4B848C0B0003576B3ED7E14' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[location]' />
              <expression op='[location (loc_counts.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='loc_counts.csv_ECE44508DD804D28B9D69029B63149E1' />
          </relationship>
          <relationship>
            <expression op='='>
              <expression op='[type]' />
              <expression op='[type (type_counts.csv)]' />
            </expression>
            <first-end-point object-id='accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E' />
            <second-end-point object-id='type_counts.csv_E183BA0088394869BD35E95012280CA0' />
          </relationship>
        </relationships>
      </object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Accidents Per Category'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Cat' datatype='string' name='[cat]' role='dimension' type='nominal' />
            <column caption='Count (Cat Counts.Csv)' datatype='integer' name='[count (cat_counts.csv)]' role='measure' type='quantitative' />
            <column-instance column='[cat]' derivation='None' name='[none:cat:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[count (cat_counts.csv)]' derivation='Sum' name='[sum:count (cat_counts.csv):qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (cat_counts.csv):qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (cat_counts.csv):qk]</cols>
      </table>
      <simple-id uuid='{D100ED44-0264-420B-AF1F-99FDA4DEDD21}' />
    </worksheet>
    <worksheet name='Accidents Per Type'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='accidents_cleaned.csv' datatype='table' name='[__tableau_internal_object_id__].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]' role='measure' type='quantitative' />
            <column caption='Count' datatype='integer' name='[count]' role='measure' type='quantitative' />
            <column-instance column='[type (type_counts.csv)]' derivation='None' name='[none:type (type_counts.csv):nk]' pivot='key' type='nominal' />
            <column-instance column='[count]' derivation='Sum' name='[sum:count:qk]' pivot='key' type='quantitative' />
            <column caption='Type (Type Counts.Csv)' datatype='string' name='[type (type_counts.csv)]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]'>
            <groupfilter expression='COUNT([__tableau_internal_object_id__].[accidents_cleaned.csv_85F0B1F0DBF74523BAA67231FEED4A8E]) &lt; 100' function='filter' user:ui-filter-by-field='true' user:ui-marker='filter-by'>
              <groupfilter function='level-members' level='[none:type (type_counts.csv):nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
            </groupfilter>
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]' direction='ASC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count:qk]' shelf='rows' />
          </shelf-sorts>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count:qk]</cols>
      </table>
      <simple-id uuid='{E65B7494-E510-4828-BCEA-BFCC6E843434}' />
    </worksheet>
    <worksheet name='Accidents Per Year'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Accidents Per Year&#10;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Count (Accidents Per Year.Csv)' datatype='integer' name='[count (accidents_per_year.csv)]' role='measure' type='quantitative' />
            <column-instance column='[count (accidents_per_year.csv)]' derivation='None' name='[none:count (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column-instance column='[year (accidents_per_year.csv)]' derivation='None' name='[none:year (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column-instance column='[count (accidents_per_year.csv)]' derivation='Sum' name='[sum:count (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column caption='Year (Accidents Per Year.Csv)' datatype='integer' name='[year (accidents_per_year.csv)]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:count (accidents_per_year.csv):qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]' included-values='non-null' />
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:count (accidents_per_year.csv):qk]</column>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (accidents_per_year.csv):qk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</cols>
      </table>
      <simple-id uuid='{7F34D196-DA87-4D5C-8884-12194E8F7AEA}' />
    </worksheet>
    <worksheet name='Fatalities per Category'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Cat' datatype='string' name='[cat]' role='dimension' type='nominal' />
            <column caption='Fatalities' datatype='real' name='[fatalities]' role='measure' type='quantitative' />
            <column-instance column='[cat]' derivation='None' name='[none:cat:nk]' pivot='key' type='nominal' />
            <column-instance column='[type]' derivation='None' name='[none:type:nk]' pivot='key' type='nominal' />
            <column-instance column='[fatalities]' derivation='Sum' name='[sum:fatalities:qk]' pivot='key' type='quantitative' />
            <column caption='Type' datatype='string' name='[type]' role='dimension' type='nominal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]'>
            <groupfilter function='level-members' level='[none:type:nk]' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-manual-selection-is-empty='true' user:ui-marker='enumerate' />
          </filter>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:fatalities:qk]' shelf='columns' />
          </shelf-sorts>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='header'>
            <format attr='background-color' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' value='#fefaf1' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:fatalities:qk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</cols>
      </table>
      <simple-id uuid='{DE5D5F24-6190-409A-A433-ACCDEF66753B}' />
    </worksheet>
    <worksheet name='Map of Accidents Per Country'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Count (Loc Counts.Csv)' datatype='integer' name='[count (loc_counts.csv)]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[year (accidents_per_year.csv)]' derivation='None' name='[none:year (accidents_per_year.csv):qk]' pivot='key' type='quantitative' />
            <column-instance column='[count (loc_counts.csv)]' derivation='Sum' name='[sum:count (loc_counts.csv):qk]' pivot='key' type='quantitative' />
            <column caption='Year (Accidents Per Year.Csv)' datatype='integer' name='[year (accidents_per_year.csv)]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]'>
            <groupfilter function='level-members' level='[none:country:nk]' />
          </filter>
          <filter class='quantitative' column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]' included-values='in-range'>
            <min>1934</min>
            <max>1945</max>
          </filter>
          <slices>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</column>
            <column>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Longitude (generated)]' field-type='quantitative' max='-10526641.188271597' min='-32798471.25814683' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Latitude (generated)]' field-type='quantitative' max='11575364.223227374' min='-793069.72812136519' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='in-tooltip' field='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' />
              <text column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' />
              <lod column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' />
              <size column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Latitude (generated)]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{17968F59-6C02-441A-8678-5208FCB5FA7E}' />
    </worksheet>
    <worksheet name='Sheet 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Count (Loc Counts.Csv)' datatype='integer' name='[count (loc_counts.csv)]' role='measure' type='quantitative' />
            <column caption='Country' datatype='string' name='[country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column-instance column='[country]' derivation='None' name='[none:country:nk]' pivot='key' type='nominal' />
            <column-instance column='[count (loc_counts.csv)]' derivation='Sum' name='[sum:count (loc_counts.csv):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <shelf-sorts>
            <shelf-sort-v2 dimension-to-sort='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' direction='DESC' is-on-innermost-dimension='true' measure-to-sort-by='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' shelf='rows' />
          </shelf-sorts>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</rows>
        <cols>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]</cols>
      </table>
      <simple-id uuid='{C094D73C-78DD-4565-BDEE-E328072D5CFE}' />
    </worksheet>
    <worksheet name='Total Number Of Fatalitites'>
      <layout-options>
        <title>
          <formatted-text>
            <run fontalignment='1' fontsize='12'>Total Number Of Fatalities</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='accidents_cleaned' name='federated.0rq2ytq1yh3tih15tg5o317h17ks' />
          </datasources>
          <datasource-dependencies datasource='federated.0rq2ytq1yh3tih15tg5o317h17ks'>
            <column caption='Fatalities' datatype='real' name='[fatalities]' role='measure' type='quantitative' />
            <column-instance column='[fatalities]' derivation='Sum' name='[sum:fatalities:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:fatalities:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{7B2FE773-DCDE-45F3-8704-E43A7E139E7F}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='768' maxwidth='1366' minheight='768' minwidth='1366' preset-index='0' sizing-mode='fixed' />
      <zones>
        <zone h='100000' id='4' type-v2='layout-basic' w='100000' x='0' y='0'>
          <zone h='97916' id='7' param='horz' type-v2='layout-flow' w='98828' x='586' y='1042'>
            <zone h='97916' id='5' type-v2='layout-basic' w='98828' x='586' y='1042'>
              <zone h='48958' id='3' name='Accidents Per Type' w='49414' x='586' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='9' name='Map of Accidents Per Country' w='49414' x='50000' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='13' name='Accidents Per Year' w='49414' x='586' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='18' name='Total Number Of Fatalitites' w='24707' x='50000' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='48958' id='19' name='Accidents Per Category' w='24707' x='74707' y='1042'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='1450' minheight='1450' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='23' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='97916' id='22' param='vert' type-v2='layout-flow' w='98828' x='586' y='1042'>
                <zone fixed-size='280' h='48958' id='3' is-fixed='true' name='Accidents Per Type' w='49414' x='586' y='1042'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='18' is-fixed='true' name='Total Number Of Fatalitites' w='24707' x='50000' y='1042'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='19' is-fixed='true' name='Accidents Per Category' w='24707' x='74707' y='1042'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='13' is-fixed='true' name='Accidents Per Year' w='49414' x='586' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
                <zone fixed-size='280' h='48958' id='9' is-fixed='true' name='Map of Accidents Per Country' w='49414' x='50000' y='50000'>
                  <zone-style>
                    <format attr='border-color' value='#000000' />
                    <format attr='border-style' value='none' />
                    <format attr='border-width' value='0' />
                    <format attr='margin' value='4' />
                    <format attr='padding' value='0' />
                  </zone-style>
                </zone>
              </zone>
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{B440FFA6-877C-4DBF-A615-16AE7B5E6151}' />
    </dashboard>
  </dashboards>
  <windows saved-dpi-scale-factor='1.5' source-height='44'>
    <window class='worksheet' name='Accidents Per Type'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='typeinlist' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type (type_counts.csv):nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0FBF5AB0-4008-4525-848F-B62B277F99C0}' />
    </window>
    <window class='worksheet' name='Map of Accidents Per Country'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='200'>
            <card param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (loc_counts.csv):qk]' type='size' />
            <card pane-specification-id='0' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:location:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{9697BF79-8EE6-4E9D-B575-9D7BE59594CB}' />
    </window>
    <window class='worksheet' name='Accidents Per Year'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:count (accidents_per_year.csv):qk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:year (accidents_per_year.csv):qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{310DF04E-3617-492F-AE70-941C62DE6D8A}' />
    </window>
    <window class='worksheet' name='Accidents Per Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[sum:count (cat_counts.csv):qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{EABF9B78-C6DA-425F-BE4D-04E431C43E7E}' />
    </window>
    <window class='worksheet' name='Fatalities per Category'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:cat:nk]</field>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:type:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{90D71275-3D44-44B3-A97C-30BF2F9DCEC8}' />
    </window>
    <window class='worksheet' name='Total Number Of Fatalitites'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{B3B30BBB-C4C7-465B-AE18-361E723C0032}' />
    </window>
    <window class='worksheet' name='Sheet 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0rq2ytq1yh3tih15tg5o317h17ks].[none:country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{39FBD0AE-149D-44A9-9242-445DCDCA60D0}' />
    </window>
    <window class='dashboard' maximized='true' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='Accidents Per Category' />
        <viewpoint name='Accidents Per Type' />
        <viewpoint name='Accidents Per Year'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Map of Accidents Per Country'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='Total Number Of Fatalitites' />
      </viewpoints>
      <active id='19' />
      <simple-id uuid='{EAF62A48-F9D0-4E1F-94D1-810A29FD7DE4}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Accidents Per Category' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Accidents Per Type' width='192'>
      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
      DACTG83/A338wSZTgauzAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Accidents Per Year' width='192'>
      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
      saWxBGCxpfn/7K0aTIBKvzUAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nOy9d3Bd15ng+bv35YyHDCIygVmkRImiKMmSLFu25dhu293utNvb1TPdu7U1
      u7VbtbFqundr/9qZremd7u2ZDtOedlKWbFnBtmQrUKSYwQCAyA/5Pbyc37vp7B8PeARIAARo
      BpC8vyoUHi6+e8J957vnfOd85zuSEEJgYnKfIt/pApiY3ElMBTC5rzEVwOS+xlQAk/saUwFM
      7musd7oAJibrRxAaukw8UwBgU8cWWhqC170rHRmn5GymKeCoXrumBxBanr/+q7+lbFy/GIae
      49ixc0uuDZz+gPGEcv2bgVgsuur/y+kwL7z8Kj978ye8/d5RjDVM2KrFND9/5x1eeekFfvqz
      t/ng2Ok1lcXk7qKhuZXM1Cje1i3U+D2o5QKjoUmEEAye/AWnBsOUFBVVKTI9E0EIyMxNEMmU
      l6RzjQIMnT1Ge1czxy+MV6/ls0kmpyMACCGYmgiRK5SRZDcPPbR7/rrO2Mgw0WgMRRcIIZgc
      G2IqHANAVcooSpmB/n7yJZVyqcAbr79OMpmkrGoYmsLQ0CD54pUCqtkohq+Nr3z163S4Mnx0
      fgwhDEYH+4nE0wAo5RKGIUgkEgjA5grwhS99iTqPzEOPf46njxykUChW0ywWi+iaQrGQ53L/
      ZcqqDoChq1zuvUQ6d0XWZKMi4fH58Xk91NQEcdrgjdd+SjkX5533PyEajTI9MUY6V2Cwv59o
      eJyf//rYsildpQCCnpEYX/7q80xe+hSAsYuf8srbHzIx0st0PMcrP/hHhifCnDnbg6HneeP1
      dxGGxj///X9gOppgZCwEwCe//AlDs2n6TvySk/2TXDz6Dn/3w5+QK+T50Y9fJpOIMheNMjAw
      QCZf5If/+XskUmmOfXpq2YL6vF7KisI7r73AXE7lk3dfY2gmxUfvvMT3f/wSR09dYvkOQuLt
      V39ENKegKzlefu1NwgMn+Zvvv0Ehn+Hv/u6f0AydF3/wfcpC4vUXf0iioN7Y92JyRxDZWfwd
      D7Br736sokBXVye79j1IY9BHJBImmytSyGWXvXeJDSC0PKOhKc6fu8j0RIiSAcfOD/OHf/AH
      yIBeiqI623n6icMA6Fol0eLcEDXdj/PE4QP4lDnA4NLlEAcONWPUtXDpzAkOtNl55vNfZE+b
      n/GxEA2bOuns7ODw4cOAoDbgJTQ+xWNPPLmkgCc/+gVq5DJufwPf+Mqj/M0nb3O4dQt1TXWc
      PX2BGk3jwJHn2b+5fsUH9Owzj/P+xyfY36TTfeAxYJyDjx7hoQObycxNMDkzSyRVZHMuS51b
      cGFomqf3d93o92Fym5H8m8hOvsLxo3NgD+AJ+Pn4+Af4HnuQuWiCji7fivcuUYCB0x/T/fAT
      2O0Ojuzv5PiFEE7ZIK/o+OwWJKsLrXytJkkWK2optfgKnkCQBw8eRAYOPSZz4eO3rs1dXPn9
      /G9/F10t8f1//B7f+tM/xzdfskOfeY7f++KjlT8MlWBdIwcPHgRAlmV+/eY4zQ0rN36AYGs3
      pfc+5UzayTe/8zTR/oXhnSCRzvOA1019c2sl3YMPIVvMuYG7gYeffX7+k43f/s53yBVK+Lwe
      AL7ZuAWrzc63vv1tdMmCw1b5TtuvSmPRNy2YSst87QuPYQXE7u28+94xvvT8c7z8ox/gcrt4
      4nNfZndngBdeegVfsJEvffZhGhvrcdZvxZo6xmtvzJGJzvC5B2SePnKAF194GY/bztbdB/HV
      1GN1VLKrb2gAYGtbAy++/AqHH3+KvtMfocl2nHWtuC2VElkcHhprFxVRtnFobxcvvvI6LpvE
      vkOfIVjfhM1y7cOpqWvAYZ0f4Ukyj+5r44NhA/v8peMf/pLoZS8NXfuprQmypcHOa2/8BAvw
      xOe+SHPQe2PfiskdQZIt1cYPYLdXZnpku2PVqU7pfnCGy2dT/PKtNzn4+W/SXudhuvcog2or
      zxzYfKeLZnKHuS8UIBGZJqNa6WprAqCcT1MQdoJe1x0umcntIJlMEgwuv05wX6wE1za1Vhs/
      gMMTMBv/3YgQ/N9/+b8ylShiJEd5+1j/mm4723N2xf/dFz2AyT2CELz//i/JFTS++uRO3u0v
      UydnePTwo5w48SmPPLKfF3/wCj6PhawUwF6O89DnvsXZX71CTW0zRZx89uA23v3wNIam8tzX
      vnF/9AAm9xCSjV1tPi5PJQEo5CvuEIVCHoRBS+d2vvj0owQ3beOpR3Yxl8xR09jKs59/DlnN
      0XPiJI6aGgJ2ld6RWVMBTO4+tj/4OINnjgKglIsoapnJqfCK8qqioJRy5IoqLZsaqWvs5PCT
      z9LdWmsOgUzuIoQgmUoRDAZJxWbRbX6cosiZi5fp2tpNe0sd6XSegMdGsijw2TSKwkkuNsnk
      bJzdDzyI12ll+PIlMmWJA/v3mApgcn9jDoFM7mvuGgUQQmAYa/DRnkfX9XWlvx55wzA2VFnW
      04nfyrLoun5Ly7JW1tNW1qUAAxdOMjfvT63mY0xFs4z1nyOaVRgfH18iO3L5PDPRzHqSr5JP
      zDKXKVNIhTlzcah6/b/79+8yNptcUxrrHdndypHgrSyLEGLd8reqLOvlZqStFdO8+sqr/Pyd
      tzh1cRAQvP3GK1waHANg9MIxXn/7Pd5//2OW8/Fds9eXMFQMm4/YdIhG/w6srhoyEyNYsJEM
      T6FryiJZHUXYKcdmcCpzDEVKNNd6yBZKgAU7ZRRNp6GpicmZGJ0dbWTSKTw28DV3oikFSkaA
      VDSJyyLQxV3UVZncUmITA0wkVWS7kwO7tvHJhx/xzFe+Qa1D5qdvvkm0zsZQaJrGLXsBKGSS
      HHz8y3QEwFBzvP+rY+QVlWee+yI+h2Xt7SoxFSJTNoglKm9gSbYgtDyy3YdeTmJxXHE5zcen
      SGQV5qJxlHKRru7dFAsFdu3qBl1Bw8aO7V2kswo+h0wml0ct5ollS3hs80USOrF4DLWYYTKc
      Wq5IJvch2bkpZnISB3ZtAyCnydQ6LSBJ2KwWajd1sf+BB3hk/y4AhDA49uF7vP/BMYTVQ+um
      Blx6mvODs8A6egDdGeDRA42kYnOkUnEku5+6mgCu+lbyEQVfSwuRSISmpiaKwsVjhzoppWJk
      yxpeu0xwcwcD/ZcplA3am50Mjs7Q1dXO1FQJl9NJiz/AcLTS+B3eIF5dsGPPAWoDbqLxigJs
      a63FaTddle939u7ZU/3cHrQzMJuiu9lPvlDiasdgSZI58tTn6AjAdO8xso6tHHnEwdl4Zfh1
      26ZB85kE0+EYTa0dBDzOq/4rmJqYpLm9A6u0/P0LY11ZXlunpWkaVuvalWU98gsG1kYoi67r
      SJK0YcoiyzKStMKX+BuWBSA5M4pUu4Wa+SYkhM7RX71HQdHZdfAIHY0BxkZDbN5S8fSdmxjE
      0dhNwAlqIcn7H57E53HQtuNBOpsCIJbDMMSZYx+LnGoIIYRIzY6LeEETF06fEHnNEKFQaLGw
      6DlxVKRLuhgbGxOGromTp04LXSuKiclZIYQQ0dlJ0dvbJ1K5gui9cFYMDg6LUjErzpw5K/oH
      R+eT0cWnR4+Ksr5siYRhGOK//XdvidGZxPICV6Gq6prkbkRe13Wh6ysU9DaXRdO0DVUWwzBu
      WVluBcu+Ngw1hytYz8TYJAC+2iCRySmsNsHMZITCoo3rhlrA7qtjenwCqVwgHg9TKEE8PI3s
      rbigjo6FMHQNCUE6k0e22YlPTrJ5zwF0JQ9AKRvDX1fL5HSUgd7zXOobZO0TjSYmN8ayCjA+
      OoZqSCQTlbAlss2LmhnHUbudfKQPV7C1Kjs1NkbZgEQixqb2Js70jPLwA62cG4pTby9z6fIw
      Lm+APXt2MRGa4PCRx/GKDNGChqrq1W2R46EpBDKxuRkUXWLP7m5z5sfklrPsAMxT28zmxkbm
      5uaIRyL4m5rwB5pp2VTLVL6NtkZP1eB11jRyoLGR2NwcFleQzV0tuL2NdLVmcbj97N3pJx2L
      0Nt/mebWdoYu96MKK3v2buFyby/+umZAEGxuo3E+TxBIQCQSocbjoICTGo/DNIJNVmV0aJCO
      7duJzoRp2dRSvZ5NRsEZxOe6tu2sagTHIjPEs2V2bLvzWweFaQQvy/1mBAuh8+bP3uLJJ57E
      6w+gFrPkSgaN9UHef/stHn/+eeLTM9QHA/z8/Q95+umnQc2Bqw6fHUITk3R0dmGRK2W85qnl
      otOcuzwKgFMWFLT5IFehUULj44TGRsmV1hs3R1Te7MIgHk9cuaqrjE9NL5HMxiNc6utjfBn3
      1vWsBJvcoxga0UiE0dFRSopC36V+Rns/5cTFBU8EiZ7zPWTTcSKRCFOzc8wNXySc1XjnrZ9S
      Lhd5+xe/riZ3jfpNxjI4hEAs+qykwyiGRKZQZHNnO7HwFBcmQ3Ru3UEkHEGy2qn1WCnpEu2N
      NZwfCeOwWdjW3sRMOIzHV0tf70UeeuRRSvkC6GXC4TBNHdtRFIWBvouUyhrd+w5QLhVRdYnm
      5obb9ERN7iYki4OurVs4ePAgeilNJJ7E6xUoscSSt3l9Uxtbtmxld/dmhk+OgKEzMxvGW7M0
      hM6SHkAIg0Q0gppLMBnNkYhGUHIJZjIaICEDEgZCyPhqG6l3G/ibt+Kzynhra1FLBbK5HMGm
      Dlx2mUQigSxbyJVKtLW20lDrp1Qsk0gmkCWddKYIQicyF8dms6AoGnWbOnlg52Yu9Fy49U/T
      5K6k3iHx/sfHiM6FSZUMLBLXRgWUJJJzU1zsH678LVtobarHYrPTuCiO1BIbwFByxPMy9TVO
      IjMTWD2N1AWcRGMJhFqiqKgIIdHW0UEyEaehvo7hgX6w+6j12ojGkzTXejg9HGNbxyacsko6
      V6SmrpFyNo4rUI9sGBRySQrFMg2bOhGGSjGTIF/W6Nq8jXI2xnQkgbemFrsslhjB//7VE3z7
      mT201K0c6WsB0wa4M2W51TYAAEJQVhTsDgflYgGrw4VVvjZPw9DRdAO7zTZ/m6jkabOxIH3T
      V4KNcp60aiXodVxfeB2YRvDy3JcKcBNZ9qlNhgYJTUWue3MxE+PCpT5Gx68YsrLDs2rjHw+F
      KGaSFJT1L3OZRrDJzeZa9ROCXFFHiDj5BIyEkzgdLkrpMM5AM3oxhabpdOzcj1QqUdYMtrc0
      Mdh/CQMJh7cWm1EiksjStamOcDxLY52fmbkUDqcTi9DQylkUyc7FM5fAbqeruZZEpoDLGyAV
      m6W+pYM20wg2uQ1c0wNopSSRWJrYXJSJ6TDIEgIBNhfbt7QjLA52bm1hLprB19DKwX07uNhz
      HlUX7Ni5k1I2TSqdopDJMhVLsWvXTrRMHAWZhcGWphRRdYNAXRNBv4dwJFLpwgXU+H2kU+nb
      /RxM7lOu6QHyeY3HHj+MpZwmUTCIhmfxBNwEfS4kSSLgtjM4kaJ71y4KmTjjM1EaN20iFZlg
      4PJlmtu3EJ0epabOybbNrfT399Pa2oFnahqPx43HacNpE9jsdqx1NUjouBrrCM1EcbudZJMZ
      XC43YK4Em6yfEx//imReYcvOB+ju2nRd+ZtmBCcSCWpra29GUstiGsHLYxrBSzl7/EPCqRIH
      Hn6UTQ0115W/YX8zrZjk+JleQBCPx6uNf2ho+Lr3xmfG6RuZxNBKXO7rp+dCL9lEhHPnLxCa
      DDMxOsj58z1E5qL0XrrExGzlmCXTCDa5Hs0dW/nCc89w8tjRNcnfsPqNj4cJuCTKhkShkCc+
      N01Zt1PKJ+nvLeKrba7sIy6XkKwS+aJKR9dmPA4bc+kCCIFsbSfgc5KP55kMxziwfx+9vb3I
      kszeXd0MhsI019eQNyMXmawRp1Xi44+P85nPPrsm+RvrAYQgloiBViQ0EaZUKlJWYe/enbjc
      fnbs6CadjFMqlygWigRrg+hqmWy2gKGXic1FySdjzGUVmlo7sGklVKOy+R2kSqgPQ0eSLWiS
      jY6W1U+AMTFZoLaplaeffopa39qif99QDyCExpbte2ioDzIXjWGx1FXGokCNz8nA4Cibt25n
      emyQsgGaomKzWnE47GilInsfPkzACeGZMANTBWz+IFvbG+i9cJHmtk5kJUPf4Djdu3aTTcWr
      +ZpGsMnN5q4JjWgawctjGsG/GTc0BDK0Ip8cPwNAPH7lDT08NLTSLVUykUkuDIYQhsbg5T56
      ei6QzyY4e+48w2OTTI0Nc+FCD/FMnovnztF76QKxVGXbpGkEm9xsbkj9ZkLj1Nd6SRZU8oUC
      yWQcXTXIFdJc7u/F6QkiywJruYzVa2VkMsGeXTvxexxMJ3LYhcCQrGzr7ubkpyeZmJhlz4H9
      DPf2UpYE+3bvom8khNPtx+fUyBUV6gLum113E5Mb6AGEIBxPAILJsVGKpRKlcpkdu3bicLjZ
      vrWLQj5HoVgknUxiq2mkrc7NbCSKoRZJJFLoap7QZJiyBi1BN0KSSWWL6IaBrumUijmsNicg
      EQjWkc+ZK8MmVxCGSjKVRQjB6GAfs9EkhlbmfM9FNKMyoi9kEpy/2IcuKsPncDiMMDQune8h
      X9aqaa3bBhBCUCgU8Hg85PN5JElCCAOPx0smGSUcz7J1y2bmZiZQDRuNjQEmJqZp79yCXdJQ
      sOG0SeTzeaKRMBanj/ZNjYwND9HQ2oUdhdB0lO3bNjMzMUZZt9C1uQMZeOfTIR7b205wDRa+
      aQPcmbLcchtACPou9pBWBAe6O8nodgYvnsMuw+79D3ChP8Tjh/YzMTFBnVeif8qg1paiJ5Rg
      W5Obrp37OXfmLE89+TiwxiGQEAa6LrBaLUiShMdTOY914fcC/mAD/mDFia2lrXP+XsH27dvn
      FcWCU5KQAK/Xh9d7xa9/y/Yd858c7Nheud7WuWVRGYQ5C2QCksSufQfoudCD0+tj9NJlmtq6
      SETD+Lx+LFoZkEBTGJsps3VTPe9/PEGxkMW59RCybMHQrmzpvao1CS6dOYqjYReddVaKkgef
      04Kmpujvi7FjzxYcNgsSYAiBrqkYyDjsNoQw+NW7b/HIZ7+MkpwlmkiCzUs5M4euG3R172Dw
      8jAWm40Gj40iFgpFlS2tdUTiKTRs7Nu1nWwyyuRsjJImeOiB3UtK99evn+S//85jbG5Z/shL
      k3sfIQSXL/UwPTWDT9KZSRs0WUtsqvXw8dFPaO7YRmx6hLHREbzBBnSrl2/91te42NdLa2OQ
      iz2naW6/8mJdogDCULF4WlCycxgeN0lkPv3gGA89uo90JsOFnh78wQA7t22lr6+fTCpB17Yd
      bGpuJB+fZusDjzA9PkF3VyPjE+PUttSDEWTbJj/nLvbTtfcQ6ckBVCEw0JFkmWBDC5l0GtkT
      IBaNEAg2EMhksHNzN9SY3BtIksSufQ+ya9+DAGxb9L+O7ZWoEclUlqc+t3XJfft2V+KJHj68
      yp7gufFRSrpOIpFCm7cM2rq2Ulfjo76+EY/LAYaBbmgois7uXTsIjU8AMD4To5zPkE4nK2/v
      hx8hHY+glEukkmnqN7WQScRRdB2bxUH3zt2glZgcHcBd3057S2XoFJseQ3XUsK2zjWKxiK4q
      lNVbc5CCyb2HJFmoDV7fCW6BJT2At7GdBz0e1FIeTcg0W23ozlYk2Y7THsFf30nAJTMyNsnW
      bVsoZOJ0dnYCgq6t3VXDWC3mGZycpnvXHrR8knhOYUvnJqYnxqht78JjNRgbHGTzth3Iap7I
      3DSaWs+mxiZyaRuZcJQJXSXgdWGTbWhCwm6V+eKhbdR4rw6sa2Jy46xpFmixEbxeFpKvGMEC
      5o3gG0lnaDJOe1MAl8N2XXlzFujOlOUuXwkWXDrzMUMTMZR8inRBxTAMVCVF78URSopWacTz
      ZzCpSpmyUrGohTB4/503K4dohKfp77tE/1CI82dPcfbUCeKpJJ+eOM2pMz2MXe6l7/JlTp+7
      CEJw4cQHDE5UXJ5LuRTvv/fBssfZ/PXrJwkncrf4kZjcTyyNC7TYCC6lSBaL/PLdX5DOFatG
      8MDwMCDo6+vn1MmTxOdPjFlsBAdrgxRyGZxOJw5vkAd2bWakr5+u3Q/id9oqRrCoGMHRmXGC
      zW1gCGLRCBanny0drcuV1cTkpnPHjeCSqpNNxonGY9cUzjSCTW41d9wIrg14MbR2SpqE22mj
      kEmiCIOpiWlqA17TCDa5pZhG8A3Im0bwymUxjWDTCDa5izCNYJP7GtMINrmvMY1gk/sa0wi+
      AXnTCF65LHebEXzH3aEfPrCXCyc/xNmyl+6OetMd2uS2suGMYKevjoDHjj/gvxPPw+Q+Y8MZ
      waY7tMntZMMZwaY7tMntZEMawcvJmUbw8phG8G/GhjOCc4kIQ1NRmptbaGmsW1I60wg2udls
      OCN4aGwSu1Uincneiedhcp+x4YzgoNdNU/tWtFLONIJNbjlLbIB8Po9nkREsWW3oioLbbWds
      eAx/fRMBl8zYVISmxiYKmTiG1U1rcz35/JVgWWopTySWor1rS9UI3txeMYLt/no8VoPJmQgN
      za3zRrBSNYKFMAiNDBNoaMWChsdpoyxsuB1WMzDWMpg2wG/GXRUdeuHLXguGYay5UaxXfrFh
      b5bl5qW9HuW5WdxVYdYsFsuaH9B63orrlV9vo7tfyiJJUvXnVpTlVnDX9AAmJreCO6t+N0As
      PE0stfIMkRCCzPwMUioeIRxd/TyBdKJyHrIQgumJENlCeUVZpZRnaGiYoqJRymcITc5wvbdH
      KhlHNyARnWUuvnqU67nZKULjk+iGYDI0Rr6krCgrhMH46DDpfJFCNlWpw8rSTE+EGB0dJVso
      E4tME0uu9gwNxsdGyORL6GqJkdEQxirvSbVcYHheJpdOMDU7t2xZspkMQkC5MP/shCA+N0M0
      kVkx7VvNXaUAaiFJOK0QDo1WZ6muJjo7yeWRMQy1yPhsklx0gpxiLC9saBQ1sJQSDA8Po9p8
      jAwNrJy/ZtDV1c7l/n4uD43isyhMRlIrypdySU6fOkU2l2EqlicxG6K4UsHRicYztLW2EJsa
      QfYGiY8Prph2aHiQmuZ23HYLgyMh7FqGcDK/onzTpjZsRplsOsZsWiMyOYqqL1+WqZEBXLUt
      DA/2099/meYGP5eHJlZMe3BohNbGAP1DIYZGJyAfJZZbuqcvl4px7mIfAugfGKHGVmZsYprJ
      aJHw5BjaHRqI3F0KUMzhDTbgd1oprjAz2ripg4DXhaaW8PoCBAMesoUV3qSyFYtWJKHYcMkq
      tbW1q652O50O+i+ex+0P4HC4qAkGyedX2KIpDPoHRmhuqCWXSRGoqcXndVEsL7fZEzAENqvE
      hQsXSOXKBAMBmuq9K5YlmUoyNTbE4OgYDoebutoa0tmVFEDCapFJFQ28skqwrgGXy4GqLf9i
      8Af8jA30ISwOLDY7Hl8thrryVlSPy05oKkIhn8Dp9NBYFyCZKSyR8dbU09pYOUrX7nRS09RA
      ZnIMT10TAZudoqkA18fhqyUy1s9spoRnBfM9MjPJ1OQkqbxOIjLB6FScoG/5QLtCK9HTO4Dd
      Ai5fgMHei5TVFXoLIB6N4PYHKWRzqKUsvZeHqA2uvCrd3t5OuVxCdngIT44wPZfG51zejUPX
      dZAkdE3F6/dyue8SoUhhWVmA+mAQyWJDGDLlQopLAyEaawMrys9NjdHQ1oW3pp6pkT5iqTwO
      2/Jffy6fx+f3Y6gKstDo672Ay7fySZ1+fw2SodDY1EUxF+fi0BTNtUuVN5OMMTE5yeRMBK2U
      51JPH0279hIb62M6m8dzm2d/FrjrjGBdUytvbvn6D8zQNQxkrJa16bmqqlit1pVnMYRA03Us
      VisIA00zsNnWOkeuATKWVcpSWV+QkGXp+mUBVFXBarUBYn1l0TSQLas+wytz+qCqGjbbyv5X
      Qhioqo7dbkMYOpoBtlV6UiEEmlZJcz3f563grlMAE5ObyV01BDIxudmYCmByX2MqwAZAU4pc
      OH+BgqKtKmcYenXlt1wuE4lEbkfx7mnuKleIexPBiz/8PvseOUIxX+DTX39E09b91Loqu+B0
      i5Xh/stI7lqmzryH6HiI3/7CZ1AUhcHBQdxuNz6f7/rZmCyLqQB3nDLCWssDe/cycvYD3B0H
      6Dt1FKfLRoPPTsnppyhqyQz309nWRcMjD2GZnzBJp9MMDg7S3d1tKsENYg6B7jhOalxFXn39
      DbLCyWDPp+Q0CUkrcLqnFwCX24XFYsEf9HLy+Ek0A+x2u9nwbwLmNOgGQdM0LFYrqlLGarUj
      SQJDgOUqb0ld17FY1r8322R5TAUwua8xh0Am9zWmApjc15gKYHJfYyqAyX2NqQAm9zWmApjc
      15gKYHJfc40CCC3PX//V31JeeWNUFUPPcezYuSXXBk5/wHhi5c3ci4nFoqv+v5wO88LLr/Kz
      N3/C2+8dxVjDioXQVY6fOL3wF2dOnbxj+01NbjaCD999nUvD09UrF08d5aMTPTec4jUKMHT2
      GO1dzRy/MF69ls8mmZyueB4KIZiaCJErlJFkNw89tHv+us7YyDDRaAxFFwghmBwbYipcCXmo
      KmUUpcxAfz/5kkq5VOCN118nmUxSVjUMTWFoaJB88UpUBjUbxfC18ZWvfp0OV4aPzo8hhMHo
      YD+R+QgLSrmEYQgSiQQCkCw20lP9jEQypMOjjIRzWCWJciHLpUt9KPP7YNVykcGBgWrkhVKp
      hBAGicTqUSRM7ixT0SwXT30CVNrixcFxpkYqLiOlQpaBgUHKmgEISqUSkZkJpsNLD2AUwmBk
      oI9wLHXtOcE9IzG+/NXnmbz0KQBjFz/llbc/ZGKkl+l4jld+8I8MT4Q5c7YHQ8/zxuvvIgyN
      f/77/8B0NMHIWAiAT375E4Zm0/Sd+CUn+ye5ePQd/u6HPyFXyPOjH79MJhFlLhplYGCATL7I
      D//z90ik0hz79NSyFfd5vZQVhXdee4G5nMon777G0EyKj955ie//+CWOnrpUDcXx7PNf5YN3
      3+Ln733Cl557CiWf4Ps/fhUJje//4EUMDE4eP0Y6k+Gf/9M/kFUM3njhx/zoB3t8TjsAACAA
      SURBVN/jwuD4svmbbBQs+GyCvCbIhQcItC68gA2OHf2IbCbFf/z7f0IA//S3f8VgaJbTH7zJ
      0fOjzAvy0xe/z0yywMlf/XSpN6jQ8oyGpjh/7iLTEyFKBhw7P8wf/sEfIAN6KYrqbOfpJw4D
      oGuV2DLFuSFquh/nicMH8ClzgMGlyyEOHGrGqGvh0pkTHGiz88znv8ieNj/jYyEaNnXS2dnB
      4cOHAUFtwEtofIrHnnhySXVPfvQL1Mhl3P4GvvGVR/mbT97mcOsW6prqOHv6AjWaxoEjz7N/
      85VN2zZXDbvqYda1G5/DwsjFc8i+erK5AuXUFLG8wO9xMpVMIekl4pkSainP53/vT2j2Xz/u
      qMmd5YlHd3H01GWkuT6e+OI3eOvVPkDC5bCTzOQoJpOUAX99G08eeRTj0QO8/OrPYP8WDEMj
      Jxx8/fDDGA/vXaoAA6c/pvvhJ7DbHRzZ38nxCyGcskFe0fHZLUhWF1r52oBKksWKWlocH0fC
      Ewjy4MGDyMChx2QufPzWtTURV34//9vfRVdLfP8fv8e3/vTP8c2X7NBnnuP3vvho5Q9DJVjX
      yMGDB4FKLMlfvzlOc8O1EQs2bWpG2JsBcHk8tLY3c/BgNw8dPIheiPD+RJ7v/vZzfKRX6mP3
      BKkzG/9dQaBtH9kTryDLNvy2im94MnSOOaORrz+7n9T0zBL5UiaK5KhEzJAkqRKBA9DLucUK
      IJhKy3ztC49hBcTu7bz73jG+9PxzvPyjH+Byu3jic19md2eAF156BV+wkS999mEaG+tx1m/F
      mjrGa2/MkYnO8LkHZJ4+coAXX3gZj9vO1t0H8dXUY3VUsqtvaABga1sDL778Cocff4q+0x+h
      yXacda24550dLQ4PjbWLiijbOLS3ixdfeR2XTWLfoc8QrG/CtoxzpNNbQ8BWCYfS0n2Qk6++
      xE9nB5EkK196/vMYuSne/OlPCUdidB+RaWxquqHjW01uL01NjUiSRGutA0v9PpCgsbEJf1MX
      0fff4CeZEHO5MjKQDI/z2uuvkckU+Obv/C4Akmzlwe42fvjCS6ilgukNanKvIvjh93/E7//h
      768qZSqAyT2KIBKeo6m5aVUpUwFM7mvMlWCT+5rbsin+eieHCFFZOFvPYQnr3Rp4O/K4ke2K
      tzoPwzDWdWjF7SjTjd5TLl8bur5cLqNpGna7fdXwjYVCoXq0ldVqRZZlVFW9fg8gDIUPPjy6
      roJek8YaRlnrHYndiPztyGO93I9lutF7ABwOR/XHbrfj8XjQNI1isYjVal3y/4Ufm82GoijV
      n2KxiN1uR1EUMyyKyd2LJElYLBYaGhrQNA1JkpY9eE+WZWw225IeZOE8sjWMByTcrntzgein
      Rwc4Ozh7p4th8hsiSRI2mw1JkiiVSvN+XVd6mIUDFhfLa5pWGZqvnKwgFBoHycrevbtvZfnv
      GIlskemYeSD33YQQgnK5XB3PL0aSpMoxv6pKOBwmGo1SKFTOWPB4PFU5WZavHHW7WmYnf/0W
      b7/3IZPh1d2W71YUTSeSWPnkE5ONiaIoGIZRPWcAKophGAaqqlaNYU3TSKfTZLPZqs0AVyYG
      /H7/6jbAk599jqHxGTTt3jypvVTWSOdXPhTPZOMhSRI+nw9N0ygUChQKBQKBALlcbskwZzH5
      fL465IGKAiwo0coKIOCDDz9CxUYsnWdP9+ZbUqE7SVnVmUvlEQLu0Ak9JutkYQiUSqWq4/x4
      PH7d+66eQrVarWiatsoQSII9Bx6moymAzen+zUq9QTGEwG6zUFJWOLjOZMOhKArJZPKGp1Gh
      YgPY7fbKjNGKUgIy0Sky+Ghc4ZC5ux1V02kMuEnlSrgcKy+imGwMdF2nUCisqfGvtPBntVpx
      uVyUSqXrL4SFoymU7BxjU/fmQQyKptPa4GdulfN1TTYOuq6jKEp1UfN6P8shyzKKopDPV77z
      FXuA0Ngon//iFxgcGmPXvv23pkZ3kMrcsKC90c9sPMf+bXe6RCa3A0VZGrBhxR6gxufk3Z/9
      jMmZMCOj994+Wd0QWCwSDTUeoumVz+M12VisZ/izMFW6Giv2AONjw5QlJ0cOHSLov/cOYdB1
      A4ss43JYKV3nbC6TjcFaDd+rV4EXWM4uWFEBdj94hP2H7l3DUDMEVlnCYbNSNhXgnmWh0Qsh
      ql6xkiRd8Q5e6Uabzcrx48evm8Fy2nYjnpe3G90wsFhkHDYLZfXeXOgzqbC4XV7NqivB6alB
      fvBSmF27dnNw345qIkP959BtDbQFZS5PxrFabfhtOgVFxxNsIhUeRzcMdj34KF77xtxzszAE
      slpkNH0NYfBM7koWN/oFD1Cg2hOsogASW3buxpmz4HNcacSSJLFtxy7GQjFmoxkefPABBi71
      UhYy+/bt4uLFPtyBIFsa3ISiWbY2e9dkjKxF5mr5BT+QtXD1W6BQVLDbZIQw0HV92bTWm8d6
      5W9HHjfSG2+0elsslnVt6FktT0mSqpuihBCrLYQJeoenaW6up7dvgu7u7deIBJwy0XQB3TCQ
      DYNyqYBsd1EuFYknNWoamqq7flbb/bMwPlvPDqHl/L5XY0HBFvJQdAO3047dZsMQLJvWevNY
      r/ztyEPX9SVvvo1Qphu950ZY/MZfYEERVlUAAWxrq+dc/yiHn/7CletCJzQ6gSYk/G1bCU+O
      0LV1O26rwfDYNDu6t5FLzpEqGHT5Nq4RXSxruOxWLLKEvpaouyZ3HVcbvZIkLXGIg1VsgF+/
      9QqxgkZDxy66O66ElpAkC1u276j+vXnblc87d1Z6iZq6Jmrqbm5lbjYlRcNpt2KRZfRlfMtN
      7n4W7wNfPBu0eAi0ooU6MxfDarFz8qN3OX629/aU+DayoACyRcIwBBt80srkN2Bh+Kvr+jVD
      wRV7gO/+F3+KYQi++rWvIUkbcybnN6GkaDgdVuT5LtIQBpZ7sJ73IlfP5S9+u68kv/D7apkV
      v3GLxUo2myU5N0N4Phb/vcSCDQBUpkI1cxi00VluIWu1kC9XN/zl1qlWnQU6fuwY+VwWm9tL
      29e+epOrc2cpKSpOe2WfqM0io+oG96bT973HcjM7V/cCV8d/unr6c+H3ygogQWuDD9vO/Vj1
      4s0r/QahqGg45/cAWK3mYtjdwoJBe/Vbf2FP8GI5WD4w2OLPKw6B0vEIJ3sGMIpJTpw9f9Mq
      sFEoLRoC2SwyqjkEuitYrTEvsPjtL8syuq5TLBbJZrNkMpkl6azYA+i6TkNDA4qi8vyXvnQz
      67AhKKsaDntlUcxqsaCtsKHaZOOxeJiz8HnxsMgwDIrFYjX+j9PprIZFKRaLxGIxPB4PDodj
      5R6gtmETopxmeHiYy0Ojt7pOtx1VM7BZKwpgs5o9wN3G1T49VaN2fnVZ13U8Hg+BQACn01m9
      z+l0Ul9fX90ZtupadFk12NzdSbCu5lbV446hqDr2ebcIh910ib4bWDwLtNz1haFPqVTC4/Fc
      M+W5+G+HozLlsWpUiJ3bOplN5MlnUiuK3Y0IAYWyittZMYJdditFUwHuChYaf7FYJJ1OUywW
      q9OhC0OixS4PsLpD4CoxyyEUydIcdDAeureGQLphoBuVkCgATru5K+xuQVEU0uk0FosFn8+H
      zWYjHo+TSqXIZDLkcrl1eb+uMAQSaLrGzs3NHDvTy5HPPn+Tir8xUDQdu/WK56m5KebuYMG4
      tdls1bG+LMvU1tbecJor9gB9Pad48xcf0dHRwZlTJ244g42IourVtz/M2wCq2QNsdBZmdBYb
      tevBJhWwSaUl11ZQAIkHDj7Grs0thMOzWGw3luFGJZMv4/dcWfd12CyUFbMH2OhYLBaKxeKy
      kaHXcq9kq0Gy+ZfsQ1hxFiiTzXD4yWcplFVcXv+yMkJojI9N4PAGaAx6GJsIs2VLF4V0nFTJ
      oK25Yd0FvR2kciWC3itK7bBZKatmcKyNjizL+Hy+akDchVNe1rKzTJIk4pEpphMl9u3cWr2+
      ogIkkynCk2MYFgfYUjTWBa+RKSdnUB21tNf56L90kc1bO+kfHEEp5mjwWojlaqj3brxNMalc
      iZrFCmC3mNOgdwmyLBMMBqmpqUGSJLLZ7JIQ6VevCywghEG2qOMrTTOa7KDdW7m+ogJ0dnRw
      5vQZfuubX+e1138KD18bHU5YPajZCJdSEWx2Bx6PH6M8hcvtprHOxVi6QNC18fYEJzIFGmo8
      1fttFomiol6T3kbbG3sj8vfSnmBJkqipqanG/8/n8xSLxepnWZaxWq0VF4ertltKkozVKDKY
      c/J00IamVgIir+IMJ/HQnq38+Mcvcfjp55YV0QyBRZbIF0q4ndDX148rUEd6bpKLKUH3/kNY
      LHK1Eitxu/cEp/MKOzsbqve7nA5UzbgmvY24N/Z+3hO84PAmSRKqqpLLXTncxGKx4PVWXrYL
      s0UL7crlciEMjXd++Uv27HuYXEnDOd/UVt8UPzLFd7/7u7z11tts2fTla0R8NfVs8wWRZQtQ
      Oa3DZrMh2pvQjIqLwUYkky/jd18xgp2mEXzXoCgKTqcTm81GXV0dc3NzwJWgt5lMBr/fj9vt
      rvZ8uVyOmpoa/uWf/ysAVFUlkUhgt9tXd4eu81j48Y9+TNeulYPjXnlrS9WuSZIt2DZm2weg
      UFbwOK/YJnabhfI9egrOvUSxWKRYLGKxWKrObYFAgFQqVT3xJRgMkk6ncTqdeO0CISr2QKFQ
      qB6iZ7PZCAQCwCo9gBDQtKmdkcm5ayLq3s0IIciXrrhBAJWN8bd5P8BGj5y3EXG5XJSTBUql
      Ei6XC4vFgizLuN1u7HZ71RXC7/dXhnw2GxJQY3VRKBRIpVJVJ7nqkaorZfbSP/4VSUc7AYeb
      pw8/eBureWvR5zfA2xatBMuydNu9QV/9qJ9wPMe//OpDtzXfuxlZlvE11VQPx7Pb7djtdvL5
      fNXYLy6cCun1MjkyQEa3s3t7F8ViEafTWbUFC4UCdXV1K68Ef+dP/hVfOLQDo5zno5P3zoaY
      QknFYVtqbLscVlRdJ1u4PQfmqZpOz1AYi0Xm/bMhALKFe6eXvZWUckkK6pXdXwseoAsnx/j8
      frw+H7Ik4altRIoNMpHRcDgceL1ebDYbNS6ZhoCbYrG4vAIIrcA7b7+Lq66N3/v9P6TZrXHs
      zKXbV8tbQKGsomoGI9MJtrUu9R2xyDJP7Ovgw/O35xyEi6NzdLfX8cdfOsBH58cZD6f48//n
      ZwxOXv+wt/sao8yn773JSOzKMakLMz6VIZHExXOnmIokkGQZJROnJ5QkYDUol8sUCgXcbjdW
      Ty2ys+JIt6wCSFY3X3juaUb7zvLGT99Etddx5ODe213dm8pPjg7w5vEhLo3NsXdz4zX/f2Jf
      Bx+cC/FvXjjG+eEwUDlE773Tozd1kWwumefFX/Xy+Ye34LRbeXBbE//fG6f5ky8/yD+9fY5U
      bqmvSiZfxrhJkesMQ3D04gTK3er4Jzt49NABoPLGn5ubIxaL4XQ6sVgsGEqR9u376O05gTDK
      TExFaa11EsmqBAKBag8gCY1kOofT6VzZBrDYnOzYs58jdbXEYonbVsdbRTRVYHQmSdDn5JtP
      7brm/26njT//xiMYhsF/eruH5jovr33YRyicQdF0nj98bWzU9ZIrKvzbF4/zZ18/SEtd5dCR
      Zw9uZmg6yVP7u2is8fBXr3zK//i7R/A47ZTKGv/bP/yKHe11fO3xHThsFur8a/fLOtk/TUej
      H5fTxuBkgl+cGsFutXD0wgQ1XieZQpnvPruX9sbAb1y324Gh5Dl+8hxTUoYdX3msGuhqIdqb
      3ell5uwJcooFSXZw6MhhBBIgUFV13k4wOH/2NBkcPH7wAJJYYTpi7PI5/u57L7Fj5w5kdy1/
      9J2v3XDBdV2/7kKYYRi3dCHsL7/3AXV+F7PxHP/Xnz67quzJ/mneOj7IE/s6+Mz+Tv7yex/S
      UufDZpX5zjN7qPW7qrKxdIF0rsTW1lo0TUPVBZcnYqiawaFdrfQMh3n1w3421flwOqxsaw3y
      5AOdS+qBVAnTDvDJpUl+cXIEQwjaG/x0tdTgsFk4PxIhnStRKKv8T999ghqfk3imSDJTZFvb
      lSHdwtc5MBHnB7+8gMNWeUY7O+p4sLuFrZtqOdE3hcthxed28INfXKCl3sfuzgYm59J4nDae
      e2QLyVyZbKFMa72/OmNWKKuMzVY2RzXWuKkPuK/Mpiz6LoQQfHxhAq/Lzp7NDdUyvHV8iF+c
      GuHR3a185+ld614IWzjweuG5ZbNZ1FJletPh9iKpBS4OhRifDPOt3/4a0qI4oAs/qqri97o4
      ef4SD+/fv7ICgCAUGqe1tbWyjGxde+O8mjutAKqm839870P+xdceIjSb5sn9nde/aVEe4+EU
      qm6QLZR54f1L/NEX9rOtrZZ/+NlZUrkSQkCN18lMLIvDXmnk/eMxvnKkm58dG+R/+J3HOHZp
      ktMDs/zvf/QklkVRC1aqx9hsip8dG+DPvv7wkhmrS6MRfvTeJbrb67g8EUOSJJ7a30kkmeOh
      7k18cC7E0FQcIeBf//FTBL2OVVeChRCcHZxlJpalqdbLeCTN0QvjdDbXYLPIxNJFVE3HYbei
      ajrbWmuxWGTmknkiiRyP72vnmQc78XsqL4WSovHvXv6UoM+Fz22nZyjMwzs34bRbGZ1J8t/8
      1iP82xeP87mDmzm4Y9O6Vqjz+Xx1Pn9hRXhxm1mIACHLlmrY+8UBtPL5PB6Pm96eU5zpHebL
      X/2tVRRACP7xb/+KYHMHLV07eOyhPWsu6NXcaQXIFsr8v6+c4H/+/cd/4zzS+RL/8LNzxNMF
      vvjoNp58oAMh4PTADN1tQWp8lUPFp2MZ/pf/+D7/+r98iq2tK2/YuBG3g3CyQCZfZsumIJpu
      8PanQ2xuruFE/zS7uxp4+kAXmUKZGq/zprhCqJpOtqAQ9LlYnIyi6Xx8fpxfnh5F0w2c9oof
      zpcPb+fR3W1IEmi6wae9U/SGovzx8wewWy3V76OhxsO3n9lN0OdaphTXks/nicfjOBwODMNA
      luXqz0L7WainoigVr4T5k+XL5TKyLOPxeKoLtoZhrN4DvPbC93EFGmhs21I9IeZGuNMKMBFJ
      89bxQf7FVx+6pcOsq+ULVy243Yo8rsft9AWKpvLE0gV2djRwvew0TaNnZI5//vl5/s//6hkC
      3uvbNql8nlI2i9vtRtd1SqXSkrotKEOxWETXdRwOR2VYqqoVf6B5XzCLxYKqqlit1tUPyt67
      bz/BYBCvZ20aulEJJ3I01Xpve77Xa/z3Gg01HnZ1Xr/xL/Dwjk0898hWzs3Pul2PqXTFr9/t
      duP3+6srvwvv8IWpUafTiaZpCCFwOBy40LEs2jRfKBRQ1Yr376oKEKxroKW5mUsXLqytRhuU
      cCJHc63nThfDZBke3NZMz1B4Ta4h9V6w2+2USiUsFgu1tbXY7XYsFkvVDRoqShIIBFAUZX6h
      TACV8Oi5XA5JqvitXeeMMBjsO89UNEOgqeNm1PWOoBsGkWSePV0bc3fa/c6meh+z8RxCcN2e
      w2cBRa+M7+Mzk/jqmwgGg9W3vaqqlMuV1fyFXWMAlmDlu7cx709ULq/hkDxRSUSWZeS7LG5+
      PFMkX1S4MBrhvdOj2KwWfueZ3Xe6WCbLIEkSm1tqCIVTbNl07a7Dle6R3b7KMCaVAwnSWpmW
      lhbcbjeaVnF9iM9O0tM3SFPbFupcOn3Dkxx4+FEc8pX4Qqv2ALFEhocfO8Kpnr6110gIBvov
      USgb7N2//6a7RZcVjb5QlPFIisN72mmeH9srmk7fWJSPzo8zl8rTGPTQUOPh3/zXz2G1yOve
      cWZy+/jus3tx2NdmdC8+6FDTNGyxLEICKeggn89X9wpYrVZyviCfeeIx3vvwKGFdp3XLdvwu
      G+r8bjBJklaeBcpmMlgknd7LI7R1bqGlcW2xVwxdZWB4lK46JzNaHVubvavOAk3OpekLRUnn
      Siiagc/tIJbO43c7qPW7kCSJVK6Ex2mjfzxGJJnnga1NBL0OLo5Fiacr88KyBDs7G3hiXztd
      zTXXzHpcfUrkWtiIO6M28izQeriRe/L5POVymXxyjh+9+R5/9sd/WJ0Nslgs1XF9MBhECMHc
      1DC/+Ogsz37+Wd5+5RUOHd7PVNLgkQe6q2muWIJ3f/5zvv3tb/Pwww/x8iuv8Z1vf2tNhZSo
      nLlVqaCluhhxxSChOocLUFZU7DYLWzYFsdusZAtlNrfUoGg66VwJ3RDU+lzohsFvPbmTllo3
      siyjaRqffbBzyUzAwmdVVa+5vqAAi3+Wu3fx58WbrVeSgSsnkOjzEaavvr7c54WFHMMwqi+I
      xbHsV/q8sKS/msziz5qmVefH1yK/sGJ69fe00md9UVTtxS+6633WdX3N8na7fYkC++tbOLD3
      imvK4rigi2MG9fb2EQh4GRufZFt3B6Pj03Rs34/X66VQKGAYxsoKsG/rJv7hn76HBZ2tex9d
      SewaJIsFv9NKKKGzd7cLaVEllmNbWz1bW+vWvQ4Ay5/tuxI30gMst7n6ZsrDjb0J11umW9kD
      WK3WqvySeDu34PNylMvlymJXskCwtR6X68qU/cHHnl4kuaX6yWazVTfTrLIQdvO40wthYA6B
      7pUhUC6Xo5CJ0zc4hifQwAO7t1Xf/haLBbfbjcViWdIjX40QgunQEAPjc7dHAdZigC4+7W+t
      aV59DtT10oflTxS5WXmsV/525HEv1HuhF1s44WVhP3A1LaVAz6XL1De3sbt7y3UVS1VVJiYm
      cEnF1WeBbhbXq+iNfEmLx31r4XbksV7525HHvVJvqLSjqKJUIz44HA7cbjfn3z9KXfchWr1r
      b84ui8G7P/949ZXg28VqR12uxI088Fudx3rlb0ce90q9F+gKBpEkCb/fX+0J3C3tzPad4dip
      njWnMzo2Tmt7251RALVUoFjWMHSVkeFhypqBUswxPDKGbggSc7PMJRadTSwEmUwWgEQ0zOxc
      AmFohEaHSaRzGJrCyPy9C5SLeUqKVvnf8AjK/Kb3VCKOLiAWmSGWzFTlDV0lmy8ihMFkaJRs
      oYRSyjM6OkoinSOfSTI5E1lSj2wmgwAK2RShyRkEkEsnGBufQgiD8bHRJQdvGJpCLl9CCIOJ
      sVFyRYX43Cyjo6NkC2XmZqdIpBfFKF1U72h4imgijRA642MjZPIltHKB0dAExqLhZSGfQ9UN
      NKVYfZ6ZZIzJ2TkEEJmeIJktVOVL+QwjY+MYQhCfmyWaSIMQTIyNUCxrqKU8o6HJK/42msLI
      8DBFRaOQTTExHUYIUEt5ioqOMHRGR4ZRFkXZSMzNMh2JIaikWyhraOUiQ8MjqLogHZ9jNrqG
      TVeGxplTJ8gU1SWXdU0FCfKFwgo3XsveBw9y8NEjWP7iL/7iL9Z8101AGBoDvecoy35iMyHa
      OjsZGBjGZrXQEPQwOBIindcpp+bwNzZjlSqNdWBsipZ6HxOzSUQhjuHwUROsZXiwn1QiTmtr
      MyPjszTWBzF0hf6LPRiOWiKTY7R1tDE4NEaN28Knx05R11TPbCxHIR4m0NiMRRKMjwwQTStI
      hTiWQDPjI0MYhSzB1s34XVb6B0bw23TywoXXZSOfjnP2wmXaOlsZGhyh3mshkiowF0uypbOd
      mfFhHMFmxkdHaG5qBASh4X5iWQM9N4ezbhNjwwN0dm2mkE5RKhfIlC2k5yapbWpGliA8PcHY
      9By1bom5HORiU6RTSTz1bUyMDJCIJ2htqmF8NkN90IdWLtBz5hy+xhYmRobpaGtmcCxEOlXA
      TYF4OktBOEnOTlA/n0c8maTOIzE8OUcqr1NMz5HPJHHXtTA+MkwsFqO10cd4tERdjYdkIk59
      YyMDA0PEY3GCDoOMbmdm8DwlRwOJyUEaWjsYHhylqakBDIX0/9/emT03dd1x/HP3K13tkjcM
      RNjGgZCQrUva6WSbyeS5D33oP9bnPpOmmZKmDUS0JYATzGKMV7xotS3bsi1Zm7XcpQ+yjQkG
      DOMheKLP0x2dO/ece+csOr/v7/c7VZvN1UVKxTzu8DGS8zMoikJ3Z4jpmRnW81WcagFXpAtF
      fPJq9ePYAv2no/zw/X+JRqO7xxypukFPzzFe7z+1mx7lWYii2Lr3sDr2QRFEmYGBPgTA7zWI
      x5OUq1W8hsbkTJoTXUEMX5igR6a8naQh0t1LyGcgSirNWpFiqUilCauZeZooCJKKx+sDsxVP
      K0oq/X1RBMDndZNIpilXy0w+iNPdGaK0WcAXCOEzZFqTiUC0rw9VEjF8PrLpBIXNMi5/gGxq
      jngiiebyEgj6qZZbM7ThD9PbFQEEVMlhZS1PbmWRfL7AyMhd1osmoYCXh7EsAqf6+lEkEY/P
      x2IqwWapgiBJaIaOIUIwFMTQZXYWje7jr+Fzayi6QSW/Sn6ziKwbJGemsCUdWdHwBkOYW62V
      TNbcnIqeQAAMt0Yyk6Va3UJ0auQ3CywsbRDuCOLSJHaywBiazHRqnd6Agj/cgdelU9hqEvR6
      kGQRRdXwhjpolvMA+P0+psbHORntQ9M1OiJBNop1BgaiLf9/R8bjNpDEbQuMqGLXCqB7adoO
      YZ+BLEv4vS7Gxh/Qd7IL3QgT8SlsVp9uKOn1w9VYDNkTfiRFurZ9CqSmaQfq/JIk7Z4z8NIH
      gG3WmZ9PkE4l0QwfqiwQiXRy584IhuHCFDTWl2ZJrW3h39Y01lYWyWQyrG4UCfj9WKKOV6zT
      QMZu1lFEi8mJCRR36zA/q1kjHk+STiXRDR+yCJFIFydOHKderyHpBsupGRY36nhUwLFJJRJk
      MimagorHpREMh3AsC1EUqJlQK+WYnksTDLYcrEqFdTKZDJmFZfyBAKbl0Nd/GpcqoioSfp/G
      xPgEJtsu0Y5FIhEnk0liiTqGrhAKhbGqm6yXTLxBP6nZaXLFBvr2Xm55MU0mkyFfruP3etBc
      XkSrgcfnw2rWwa4zMTaOO9gK8m/UyiRTKZLJNB6vH9Ex6ejsxR8M0HQUcRZzawAABRJJREFU
      zp05yfzkFPmKueuiMjJyD8Ol4ahelhPTZDdKHAv5mJycxLQlHHOLiftjeCPdAIyP3EVyGdRr
      W9SrZUanEnSHdObjKdKJBLomMDk1iSO3AoNolBidSiLaFgGPm7HJKUxb5O6du7g9BlumQmkt
      wexSibDx9L1KXdKIdITZqlZ27f2CIOx2Zl3Xn3+P9DLMoE9iR7X9qUhmWa04WWmflzGbDQRJ
      QRKFhzZuoLmdl/TAdZhNEGWkx5Zch0ajiaKoCDhY2/qEY9uYtvNIeOIOtmViOQKKLGHbFpbd
      SrzVCrpQ9vFy3FPHnjLTbCKKMuI+fwOazQaSrCAKB31vm2bTQlUVLLOJI0jIktiqQ5IR99kY
      W6YJYuu77wSMPKsO07RRlEetL09+bx4+d0+hbZnYPIyLfhKVSqXl9iDLeAzjuXWE/fhZB0Cb
      Ns9DuVymVqvhdrtfaLbfYa/w+kqYQdu0OQiO4yDLMm63+4U7P7REuNRGvJVWpb0CtDkq1Go1
      NE17bl1jL47jUKlUHgbVH2L7jjQ7eeZzuRzPmhEKK2lm0yuU8zmWVve3X2ez2daF1WAhu7Lv
      PbZl8dPpJ5tJMD0bf0TT2K+dqwdoJ7TMuwvLa4+VlNYWmEpkn/mEV4kXEfX2w7Iscrlcy0ft
      ZesArypjP1xhtWpyfzKOQYVb43P0dviIxa4guYNUiuskUwt0dXUSi13h/V//iv9d/iejM2ne
      ffMMt4austmQWM/MMJ/dpFoqEDBUYpe/ZXpxE5e1ydjcEgFdYPj2LYo1iy/++heqaohGYYlM
      rkJPZ4ivLlzAa4hcv5eE0hLx5RKaYJJOpXD7Q9y7doly02RibgWtmefOZIKesIcr38WQvWHK
      hRzJ9BJdXR2M//gfplfrhH0esslpppIrYDXxuhVyZYv7w0O8fvbsgYPYf24syzqUje/KQoKL
      se95561z7RVgh9989Bn/+tsFPv34t1z85jtWHowwnckhyRKXLseIfXMR1RMALBqWiOI0mE+v
      UFpJMztxmw2xg9fCIqPxPO+/NUg8GSf27WU++PAjNLb4+tI1ZkduMHxzGO/JN5geHSHad4r3
      3n6LufGRXUuKWauQWlylyyfy3Y1R7lyPcXPoGgv5Broi8eFnn/Plha/49MN3ufh1jMzELWaz
      G8iqwqVvL/Pvf/wdIxgGYH4xx8d/+IC+aC+3hodRVZXZsdvcHh5ireqgq1Brvty08K8CgY5j
      nBk4ATzloOxfGqLi4rXTgwTcOh0hP919ZykvTLOxZaNIEt5ID2dO9QIiguiwln5Az8Db/O6d
      QeaWq6Sn7jK3sEFlPcXt+1MAGLrI1avXqTsyEb/BqbPn8btU3NuZjD26yvCdUbpPRBm6cQMA
      d6CLP/7pz3z8+/fxGRpvnH8PTXfz7ttvIokCkualf3AAQ1WJRLz0nj5HIT5OoSGiSgKhnpP0
      H+/i5tAPvHNukC8uXGDo1j36B89y9+YNzp8/w5exe5yLdmJaIEtHZPo/RNaXM9wfvc+98Zn2
      Jng/ds1korirA+xl8vZ15O4zDB6P7P5m2xYIIgIOttNKuY6zR0dwbGz7J/EI2+WCIIAgPGab
      d2wbG/bVQw7STmjtMxBFcGwchG39xKZeWuXaSIrPP/ngxT/US6Zer++6P7wojuNQLD70AWsP
      gBfBcbC3wyKPKnvDII8KhzUAdlKnQHsAtDlC7O24h0V7ALT5RXN01/A2bQ6B9gBo84vm/7JZ
      uAdxUf/2AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Fatalities per Category' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Map of Accidents Per Country' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAgAElEQVR4nO29WZBkZ5Um+N3N9y32TGWiXQhtlCSEikUSCIEECAQCUTRVXWXV28u0zUv3
      y5iNjY2NjXU/Tj/MUz+M2XRXG1OFoBACSYAEEgIJUZRWhCS0pKRULpGR4e7hy71+/a7z4Pn9
      8fv1e32JcI/IiIzPLCwi3O9+zzn/2Y/SaDRCwzAAALZtw7ZtRKEoCgAgl8vBMAx0u13Yto0w
      DAEAhUJBbNPtduE4zsAxosfL5XKwLEsc4wCTIZPJIJPJiP/DMES73Ybv+wCAdDoN3/fhed7A
      fvLn233+fO8AYBgG0uk0NE3b1jF3ErphGMhms7BtG91uN3YjPiTf91EsFpFKpdDtdsXnjuMg
      nU5DVVXkcjlks1lYlgXXdWOPV6lUAACWZc3gli4MBEGATCYjCNDzPARBIL5PepdkkGkJnjAM
      oSgKFEWB53lQVRX5fL6PMc5n6Pyj0+mMfCi2bcM0TeTzeeRyObTbbQA9BpClfiaTga7riQwA
      AKqqQlGUgxVgi3BdF81mE8ViEaqqwnXdsZ5ldEWYBCT0MAz7zsX/FUWB4ziwbVswZxAECMNQ
      0EgQBOI4qVQKqVRK0MJuQDBAKpWC7/tDiRboEXs+n0c2m4VpmrEPPU6NkuH7PsIwhK7rI9Wl
      A8QjDEOxglKd3IlzDmMyMgFVW8/z4LpuInNalgVN05DL5cSqwWPsFAQD5HI5BEEwkgEITdOQ
      TqdHEnvcfrxBwzAOGGCbsCxrIuKf9YorS/txEAQBTNMEgF1RnVT+QR1uXIySBklIp9NCV91L
      xtIBxsNWGcyyLGGf7CTU0Zv0o1AoAOjpoFuR3kEQQNM0eJ4nOP8AFy7IMLtlCwoGSJLoNFgI
      3/ehKEqfG3QS2LYtvAXDsFe8CAfYHqj3a5q2JY0gDENhU/J/y7IEnY2iUWEDdLvdRNeZ7K2Z
      BsdaloVMJiM8SUmMl3SOA+/R/sJW3yVjH5ZlIZ1Oo1wuIwgC4YJXFAWqqqJYLALoF6r0Quny
      AdPpdCwTTJvYeJG6rotjR4k6ek7ZQyDfyAEj7G3wnfq+j42NDeTzebESeJ4ngnaqqiKbzYr3
      ryiKENqGYQg6CIKgL8jH48YhnU73u0E1TUMmk0Gj0ei7wDgYhoFOp7Otm48a3dGVJkr0UQ6W
      mUfGAVPsLcgBVdmulAN7QE9zUFVVxA3oXi2Xy9D1HilrmiYCsaPQ7XY3GUA+8DBQd+d2XEpo
      F2wHPGaSmhVH8PtlRUhi5gsBcQIs7j36vj/gKVJVFb7vQ9d1QQtM7RkHumma0HVdHEDTNKRS
      qUQPj6qqCMMQqVQKpVKp74TpdHpoCsRWIT+QJFVoryLK7KPuKSok9gO28x6DIEC9Xkc2mxX0
      OMrBIkN1XRfVahXNZlMQVrlcRiqVit2B0V9d15HL5aAoCkzTRKPRgO/7KJfLM/Xvx60Ke5kY
      kla5/YZhRE5Vh+9yK8+g0+mIZM5mszn2fjpPbFkWFEURuSVJQQmqOeVyGY7j9BkYiqIgk8mI
      lWAriBrDlPSyPrhfiGa3feCzQtI7HOXV2+5zkG3XcdHnBaI6NIwBgE1dLLqN4zjCKp8UcSqA
      YRhQVRWO44z0Eu03ItqriCP2Ufk9u/nu9OgHzWZTWNRJyGazwoWpqmqfdI5a7luBoigiL2Ta
      6bu7iWkZuuf7s9hL8ZsBSg/DcKQRSwYxDEMUyMj7bzfFgVLEdd1te5bOJ4xSecYx7M83Aooi
      6frOR1tNUZTJc4HkneXfhKqq0DRtIks8CsYkdiM5ajexH7xaSTifiJ+eoi0xAD1EYRjGVpFZ
      liUKHSZ9oWEYIggC+L4Px3Gm7k7dbexnAt9LIJ0BMSrQMOi6Lip9XNdFo9EY4Gw5v3urYBHF
      fsIoFeCAOXYHE60Acg2qnIF3gO1hvwT19hqCIIhngLjcm1QqhVwuB6BH/NvNAxoH+4nB9tO9
      7CcIFShaj8l4AP3w6XRaZOA1Go2puDuTEE192GuIBoFGqT7n8z3ux9QLGTrQT2S8Uc/zhJvT
      MAxRNN9ut2dK/PL17OWHPo7Lcy9Azrvay+8jCSIVIgq5uJluo1GtTraDYanNe4VYCJmBo+5i
      Od/lfJf+xH4kfGIsLxALC6btl4+Gy5lpmtR/Zi8QC5FUo7CfiWkvYiI36LQRR9yydJS320vE
      L2MYwe9lO2e/YOvh2hkhTv+fReewYcebxrnGDf2fjykCFxJ2jQF2M5vTtm2cOXMGnU4Hqqoi
      rSooNhvI+h40TYPjOFsmzK3ktB8wwe5h11SgJMM7Sf8f9xjjSG/P82DbNhRFga6qWHjpBei1
      KkLDQOO2O3DW6jGGaZo4cuTI+Dc15LoOcP5hW8lw28GwjMFhf8vSNe4z+X82ZY0en8b2/Pw8
      FEVB1nGg16oAAMV1kVk7A8MwYNu2yHma5L4OiH9vQFEUFAqFzRVA7to7rRMAWythHKYejWNU
      Rv+Prihsr1EqlaApCvxiEVqrhVBV4S4uoVwoolwuC+9X0v3EPatJYhj7Id6xV8G0feXUqVNh
      NPI6LhPQbZmkikQ9OXFSeTfBa8yEAdJra/DKZZiZ7ECgL4n4457TJKuAHCNIig0ceIpmC31Y
      +Vr0BUUhE8o4JW/yy511NHkYstls3/8hgO4llwIA0pH7ZGq2jGFCYlKVKemzJCbYq3GR8xV6
      klSLFrQMe+GjCCIaBJJbV+yG3jxO1wreV9LqFv18O6kC47pLh21/wAxbgx5HoNG/xy3TG6US
      DJN4Owm3vY6HH3sSYejhyhs/A+/s61itd3Dmvffw5X/97/HGkz/AWqOLD9/6Odxw6dLA/nEq
      0nYYOU7FSnono1aGA0aYDANeoKgXZVyjc5iOHz3OVnzl04SiZ/GVbzyA+75yD469+Qfc8um7
      cO+9X0J2fhErOIFV5xD+4i+/g7f++RkkXaG86m2X+Pkjd+ebRMWSn2cQBGO9uwP0oCc9JPml
      JEk4WU1K8vacjy9BT+dQ/+BP+OmvXsQX7/8mAGD1tWdw0fW3Q22dhXb4YihQofsB4i5fJlBF
      UbZlzwxTtbaDOBXtAIOIjQPESSFZQvFHRlwRTfQ7+f/dhNM6hZ888yb+8l9+B0uFFMLQx69e
      OY3bP3oEKC8jOHkMYeDB1TXIlxoXpJsG4UbjG9MUHOerEJoEbNc5i3QYNZpnk6THR/8fxx8e
      /Yku8buVDtyuriIMunj4oR/i96+9C986iyuu/3NoAJC5CBeX2/jeP/w9rv/EZyFfXfQ5TMut
      m3SMnSTc3ZzUOAy6rmNubg6FQqFvLvI0kM1moZw8eVI85ahHR/YIUfJFJWCcUTZKOjJ+wG12
      WkpxzNM4YNrEXscoYSOvbsT5sHJks1kUCgW02+2pleHquo5SqdSbDxAl+iSfc5Toh3ksKBmH
      PfQ4xtkpTFLUs5vxip3EsCDcrKCqal/7SwADNSeapgnjfjugBpLL5ZDL5YQK31cRJjOBLPWZ
      JkHEeX/iLjCOsYb9vVNIGgW1nxF1oSZtsxPQNA2lUkno9YrSa4FpWZYYvq4ovfaYnP6ynQHf
      zP3iiF75OQxEgkepOKPUGlmSJBH/bjPAAeKxE++ChM0mC4SqqkIwKUqvRT/b8GynBQ/VnaSG
      zbpMpNEo8KS6edwSmuTiizOiD5hh/8MwDJGMGAXH55ZKJUH8YdjrQLgVFUjTNJTL5aHdyvWo
      8RPn6iOSCHmYFynqKUnyGB0Q//6HovRSkJP6xnK2BHO1giCAbdtbMn51XUexWIRhGENVv762
      KHGESs4blog1LOiSFDGVjzeM+PmwLhRjdL+C0jhp8pCiKH1Jip7nodFoxI7qorrNyZGpVEpM
      HnUcR3iORrX5B0ZUhA3z9ydFQKMrifxZ9BjRfZKu4QDTwbRrPsaFqqqYm5sTc+hGIQx783/j
      iJ/zpbvd7sD8X13X0Ww2USwWxx7TpcsEm4RJH9owpuH3cSpX3HEOGGB62K3AI6XxuMTfarX6
      1B4GwVzXRTqdBoBY1UbXdZTL5Yla8w/kAsmqT5LEiPMajestkvePsz/izrHXsF/uYxzkcjlk
      MhnRMTAMwwFf/jiqCLBJ/HJ3cQ5j1DRt5HEURRn7XOL4ccQ3KsQfp+ZEjzHqQifZbi8R0SiB
      sZsYJxYAbLbBl9UINkZLpVJwXReapiEIAjHZnfXTjuOg3W7DdV0h3JrNJtLpNIrFYuL5wzBE
      p9MZaK0vD1uZxeqlRwl4HMNU9hLJfv84myHuoY/6P3qOvYLzmfiJUUxQLpeFMRq3qiuKIrqE
      R9+1oiiCOQAIyR0EQaLxS7DvbBTpdFqko2QymS0NYByGvjjAOMQPJLtKk9ymSStGFPstQHY+
      3sMwmy+dTvfNgJAR9+7itsvn80P3Sbqmdrs9oDpls1lks1mx8kyq3owDPUkijOOb537j+vHj
      Ui7ivt8PkCUm/98Kpq0GJhFlLpcb6qMfF5Puz0BXNOFQ0zQUCgWh18/KeI9lqUke+qSqSlwc
      YL8gzqEw6sWNUjXHlaDbgWEYKJVKO+ohIs10Oh20Wq2Be+CgxFlfkz7sBMOiwtvBXtPtJ8FW
      HQTDgolx/0/zGSalJswKlPqtViux4ziNaU3TZnp9Q9ercXQ++fPd8DHvNJJ04ejPuATK7eMK
      Usa1l5L2H7UfAJRKJWHU7hSCIECj0Rjabp9G8axH5Y5tVcQRufww41xVSUZ11Du0V1eDURJ+
      UoEwiVo4Sdwlbj9VVVEulweyMncCruuOdb2apiGfz8/0+sZigFEXMGplAAaJXM44lbffjso1
      a4aSpf9Wn4mMOI+MfP+j1NO4Y43anr8rlcpM6mxHwXEcNBqNsbeftXBUoy9VXpLlGt7o95Ms
      u1G1YbsEnnRc+dqmjUmOK8dIRh0zDPvbyYy6h7jjjvtO+DkTyHaa+BkUGzex0fd9NJvNmTKB
      cIOOcl9NSlhJL2lcwpCPE8dASfuNy1yGYQj3mmVZI7efFMP87Unbx91r9Hjy72Erkrwayt+p
      qjpztWIYknT6uOel6/rMV4ChXiBikqVY/nxcYpSryeQXFicN42IH8jbjGp6pVArdblescuNK
      pXH09DhmH3cFHOYN2op9IP+vqioqlcpMAkrjYFTjNPm6s9ksSqXSzK9JBeKJeBrWt7wkJxmM
      cUt3XJrFMKk4zgoWvS5GFx3HGTt1NpVKiRTcUZDvYVIpJu8nd3qLu49R+3MbwzCwsLCwK0Yv
      kVTaGPdZJpMZUMFngQFR4HkeNjY2APQTZ7lcTvR0TKLSxC3NsoSSX3YY9jIL5WLm6GoBbOa5
      j6teGYYB3/f7JPU4GDcPJe465MYC01rWo925k55BOp1GpVLpm8K5GxhWPxLFMIE2zboGURFm
      2za63S5arRYOHz4skpiCIECz2Uy8oOhLHbZkywSfZMypqpq4+vC7uH0nWbE4AyzpWEkg4wzD
      JOrNtBF3fJn4fd9Hp9OZSVLZVq8vCd1ud2g547QYWW82m/B9H5lMBvl8vk/Sa5om8rBN00xs
      KEVujLZP4YUOA5f5YUsdb3Yr+n70OuW/5XLPUWAyVlyVUvRaZ4VxjOMoHMcRwwB1Xe81g9ol
      GyBOiEYlua7rwjmR9F62m68kQx+ngiYIAnS7XZw5cwZLS0vI5/N9BNvpdNBsNmGaJi655BKh
      U8cxQ9Tvz/993++zF+TtZEJVFEU0S4rTKYepNHEPlIQxqu9MLpeDoihDt9uJuuUo848y4Bl1
      VRQFCwsL4l17nifUS5khgiCA4zhTb0MI9Ih72PXmcjlRM7BTatpYoqBUKsF1XRSLRayvr6PR
      aCCTyWBhYUHkcywuLgKI90BEDcI4T0+0Ai1Oh44yVhKxR1svyseQr4vMNApUGYIg2FaDpu1C
      fnajJH8cWKSiKIpoNahpGubn5/uYwPd9sSpPE6M8bnLHtp3CWGfTNE3kih89elRUBZ04cQKp
      VApzc3PQNA2Li4uo1WqxrQep30fbrcuEOM7MMZlZ4hDnUhuFYbnmhmEIqURmH+XJmESCheFm
      JVSz2ezLkZHvOeolmxRh2Cs3dF23r8+mnHNDdXSW+Te7YXsMw8gVII7QuJRGpRGlSbVa7Vtu
      o7p3nPSKeniSMI57UTbIk/zvvPYgCOC67oA9EIah6CqmKAq63a7IYUki7qSVSWZcgqoJsJn6
      m06nEYYhGo0GgiBAJpPpy9GPro7RY45CEAS9yYgR71un04HjOCiVSmg0GgjDsK+wZVqgBy7a
      50dRlF1zz8YyQJxHR0ZS4hv3K5fLaDabqFQqsfvHSbJRag2wGUgZRwLK2yVdL4mHao2cn6Qo
      iijpY4+aYedNMv6TVoONjY0+fVdWxebn5+F5HhzHSXyO4zyvJCR57ORnIpc2ThPRY+q6LoJz
      s2AA2opJK3yiCjSKCYaBIexR+nLcCxgm1bfSjz/OJpEh6/XyNWSzWei6jna7jXq9vqXzxg0S
      IcKwN6dWVj1ksBtCnEoSXVG3SjjyPamq2ve+ZiWN2Q2ayGQyM634UpThnSJUIL4eeLsXVCwW
      sbGxMZbKImOcbaIvPbqkR7e1LAue5/Xp1MNUo1wuB13XYVkWLMuKXakmucY4Kb2wsIAwDEU3
      haQU4UKhgGazOfJc41zPMPi+D8/zxDXMSlePc3vuJgb6Asn/b8enTenX7XbFTSYtqUkMMkrX
      lv9PMhC73S5s24brunBdV3QWixrj9D8zSU5u7SFfJzFuNDKJeRqNhsjINAxDEF/0PnRdH6nn
      jys0hm3L1ibUz2cVz5CfwaxGH02CPvab9k2XSiXUajWh05IBeJ6oSjPKkzLKJom7ftM0MT8/
      Lwxsz/NESm4ulxOdxsiwnucNrBhR5hz1nJJqHQgSe7SDAtUhGrdhGAqGdBynr5/+JCvrOIKE
      LcRZoG5Z1th5T5OC6mGlUpmJnTEJZrr+cAJIo9GA67oiIcv3fZimKSKTRFIMIDqNMurqTJKQ
      NH5kVcQwDMzNzSEIAmxsbIg2IFwheA75nLL0HMWwcaqZvD198NGoukwIXJF4XZlMBrZtb1la
      JjEJr8cwDNG3J51OCyZgV4Zpg4HU88ElOnMFrFAooNFoYHFxEc1mE2fPnkUYhshkMuh0OvA8
      b8DllvTQ+SI3NjZEKjMbofJhygxEiZ5kGwCIDfhEJfi4Ltc4RBmC0p+BNRlyoE9m2lQqJTqm
      RVWZSVbtOIYMw1C4IOX7HOXy3Qq4AlPo7KbqQ8ycARgbAHplePLynsvlsL6+PtCGT4b8wpvN
      pvBXz8/PC6ltWRYymUxfUydZzUpCqVRCtVoVfelN0xQRZ6ZLFwqFsVQMEpBpmkin04nSrV6v
      iwau8rOIHovSn8dJp9NwHAe5XG5LquowO0l+RjJjdbvdvpbl20W32xVemfOB+IEdYIAoooZe
      uVxGvV4X0WQ5MY7bdbtdNBoNFItFlMtlcSzDMGAYBjKZDDY2NtBut/v0ZqoScaDvfWlpSfSV
      L5VKfS+n3W5jY2MDhmEkdk6gPtvpdNDpdJDL5dBqtQRxk4mo+kRTOuJUvjgPUjqd7pttNon/
      P2rwj8MAAAYM8+2CeUfnC/EDgPLWW2+FLJGTE9JM04SqqiJNgBJB1tmB7btL6QLc2NgQ/d0v
      uugipFIp2LaNMOyF8KP5KknH4m/btqEoylgSTLYpol6fIAhQrVZRKpX6GjXJBNXpdBAEQV/A
      igbt+vq6eOlxBTUM1BCqqvYl+/HvMAxRq9WEusdVc1TaAo37YXGUfD6PSqUi1EuWiGYyGczN
      ze14fs5OQvnTn/4UAkCr1RITN9ikNJfLieCIruuwbRv5fB6tVku4DZeWlrZ1AazK4gsPwxBn
      z54Vemk2mx3arxKYnctOjjxXq1VBjDwvM0kZN4ii0Wggn88LV2YcIUUJkzlRfBayG5TnbTab
      aDabWFhYEHGEJMgMEMcsitIbSJfP58V9Oo4j6oan0S7xfIbOVGcmuHEIgWEYWM6vwlavQKtt
      iRRZrgLTSJfVdb0v8Yv+93w+j263i4WFhaFuslkzgKxmRHObxvH/e54nGCOJ+OXzyMf1fV+s
      tlQN+azy+TxyuRwajQZM0+xbeeK8UfK54u5RZl7P85BOp3ekHvd8gE7DVAbVIFU/hLTvw0hl
      ZpLrLidGsQVGEASYm5tDLpdDrVYTo3Wi2Ck9MqqPj3te0zTH6rgme6x4/Ha7nai6yYRcLpex
      trYm3Lby9VEtoxE/jAFkIWMYxq7WDe80YpVqVoIBm1J62gwgR15d14Vpmsjn88IfzUBJrVZD
      Op1GoVAYWA1kqTmLVWCYT38Uut0uyuWysKtYlCI3oY16f1RVhW3bIycbypCfF9BTj1jhR9Uy
      iQGo/sjPle/kQkGiVVk79S6e+f0ruPS6j+Hayw5P/cSe56HdbosU4LgXbhgGlpaW4LouarUa
      KpWKeDnyPrNUhbYqCTOZDOr1OgzDEMxAQ5Zu4Si63e7I/vzRe2TOFfX8QqEgXKXMY0oSXvIw
      DGDTHtnt6OxOIpEBTpyp4e4v34uH//F7uOJDfzFe5cwEME0TmUxGSKekYnh6TxYWFtBoNDA3
      NzfxuVgT2263sbS0NCARSVjtdluMB9ou8vl8Yk59vV4f0NsZ8R2GOFWVg6dlhGGIer2ObDab
      SPxJdpzv+2i1WohTjfcjEhngozfejPdefwFhbhmGpsBPyGwm8UzSXMrzPHS73b4lmipPEqjj
      clQOMH7iHt2pq6urADYzHw3DQBiGIs+GUWkm0K2srIx1P+OA0pXnoTOBkp3qD4BYwuQ20TaK
      SefxPC+xiQGAxFGifDYMwu13JkhkgBeeeQxr4SE88JW7EAYBorJZURShszNsTltBNqyiQ88A
      wLIsFAqFvrlRUTUmTq0pFApot9t9BBInyQdu8pwds7i4KAipUCiI2VNkQuaqW5Y1tTTdbreL
      drstzstzRetf6QGj+pJE3IQc3JLBCrdhrst0Op04s4v5Wa7rnndBq1kg8S0/9etncOlHbsGP
      ftbEvXfdNvB9LpdDKpWCZVkD420AJHZaYOBLdrOROOT8nDjISWL8n/tHA1gy5HORuPi7Xq+L
      IBf3K5VKU7EnGB3O5/ND1RvP84S/nsIkyRAdxRgA+lbJOAzrDVosFkWe0iTEP+28oZ2Ccvr0
      6TB64YZhDIzIlAvdOfY+ifiHwXGcvinfQH/0E+hnAFmSNRoNMXSZkjSulpcqVRTD3IHTgnwP
      6+vrWFpaGiqNGbWW0wR83+9jgGiiGtWgaKknt1tbWxMFN1FEez9Fr2USI3iYKrZXoMd5F0YR
      CpfZcbsHUM82TVPol9GUAB4rGmmVHy6DdrLPOxqd5XZRRIkk7hq3gmhhTLPZFBmoo4if10MB
      wG1VVYXjOH3EKHdKll2bvB+mdruuKzxOUbDhbBLx0yYb1Y9TjtrvdkXXdqGcPn06HFZQkrjj
      mL53x3GwurqKSqUydlhdjmZGXZ1UK/jyOaw56gmJGotyPgwRvRaZqORz8njyfdNrZNs2fN9H
      NpsVxvSkhSSyvh1V53gfcQVFNIrX19fFymhZFsrl8oAQGJXXw5Wo2Wxibm4u0QCOEv9elv7A
      ORtgK9Jv3H1SqRRKpRKy2ezYOSXyChRlBs6OlVGr1UQ2p7x6RCGvGPJncX/LoJSXBYXv+7Bt
      G/Pz831uzK0EkcjIYRgOGKey4ex5nkhVkNvS6Lou9Pq4OgMWAQ17/rw/z/NQr9exsLAgpLu8
      8sRl6+5l7EiWU9xLGRd86PQwyQlq/Jmbm0Mmk8GJEyfG6tyWlC+TBLm7Q5Q5qboxNXsrkLM6
      k9RKJsXJK1C32+1r8BuX7akoylgZnWRqRekV7TApji5Vz/OESjZKRdpL2BEGYPXXdiG/aPkn
      DHv58ocPHx7ZQWEa4HWk0+ltT5fhqsR++FEGltU2li52Oh1xXtobSXMEmI06DphCLjPBmTNn
      Boz0/QSd2ZeTpLz6vo+NjQ3xUAqFArrdbp8/PdpwdSs9NaPXFOfulJmCOUydTmeqlUzyubga
      NZtNpFIpUaCzVSM66nAgEZLBooavoigiVsC4AQN4jGsAPWZh1ugog5Y1wHJrFu6TSqX2lcSP
      Qk+lUqjX60KXjUO73RbVSNRFFxcXoWkaut0uqtWqaLudSqUQBIHoP1ksFgdSdsdBNDaQtI1M
      IEAvWFar1WBZVp++Km9HXXmSlF8SP+9Lbg85CsM8JoxuB0EAXdeFARvtExS9T9d10el0sL6+
      jquvvhrFYlGoRYqi9EWZh90Te4UydZuCyjCMmXZsO1+gy8llwKAh6DgOqtUqjhw5Ilxxtm0L
      wmItrqqqyGQyItTPaC+LN9g9Wj5PnL7K3+M+9KjHJggC0QYlroKNsG0bZ86cQSaT6SuzJBqN
      Rl9JIG2QfD6PhYWFRC8Y1RWuXnKnCaDHDI7jIJ1OC/WFvUHl7Xj9cfYTVaClpSUsLi6K6wEw
      8dBrPqNCoSCuqdlsIpvNXjipENHcFKLZbKJWq4lIKQDhiYkiCALRSY0v3zRNuK6Lw4cPDzzI
      YUS+lSWXfe0B9JUu8lxRkHEdx8HZs2ehaZogTN/3USwWhUcmycCMAwmeejkT1ug14irZ7XYT
      1RMau3SPyq7W1dVV5HI5LC4uCuN/q0TKlYLt7nmtDKLtd+IHAOXUqVNhGPY6ElNNUVUV1WoV
      +XxedDBjhdI4Pm7OGSsWi30viIwxzCM0qYcGgAjK8QVyX9u2xyrukKUz3ZnDDMskyD1G5cAW
      Qf18WDt2ufW74zhQVbUv3VlRFJEWvrS0tG0iDYJAGLlJq+V+hpgRpigKNjY2xEssl8tiogcN
      r06ng2q1KpbLKNjWG8DAy4mLOEexFeKngR0nCdPptDCIqVPHNZfi/yzSAbaWNkEfPY9HNyLz
      clhSynPQAxT1ahFh2CuqZ0OAWaQe0P3JNjAXgtSXIcQQ87+ZvShncabTaaEfUloAPeKr1Wrw
      PA/ZbBa+7/fpozJkgoprV74V0DBPenEMEnU6HbEyDGuVHQeZcZMYgkTEVA2mJCiPgH8AACAA
      SURBVDD92bIsoZvLtkkul0M2mxUrpnz8Wq0GVVX7BAmvhcHFaYADMui9m8VopPMZA4OyM5kM
      Go2GUGF838eZM2ewuLjY90I6nQ7a7bZgHOazxBHitAheBgly1AtLpVLCMHccZ2z3KK816n2J
      glJeNmS5PTs2cBYxnQTU57PZrND1qd4oioJms4lcLifujauCpmmi0GZanRrkwCJdu/u5C0QU
      QgUCINxhvu9jaWlJRAaPHj0Kx3FEPj37+Bw5cmSAUKKYlQ85qc2I/H005YFJZnErRvR4owif
      z4meMGCzrybPR8OXlW8kcLpQ+Sw5tYWdqwuFgvAW0VOkqirm5uamrqbIrtyk8U/7GX26AAvT
      V1ZWhBEIQLTIW19fF1KNXoMk9WAr+vwksCxLVHTFnUMeDUq1h3/zPuXYRhiGQk0Jw8162ijB
      yekBHO5AyH1I5WJ1+tJZbCILBao07C3E7RjoIiOPExfZCsjEPMcFzQDLy8s4e/asSKziks4g
      F5feMAxx/PjxvjE/Mviypg0SHwDRyIlEIof8Ga1lQTrtADIto8XyTFo5pYHMJbciBDZHubIK
      LqrykCnke6dUXVpa6mvgS6iqmpiiLNdgBEGAer2OTCYT+8y3AqpnYdhLgc7n8xdUQTxwLhUi
      DEPxUJlrQmnY6XREX85KpYLUxpvolq/C4cO9ThGy+5SYhdQngVJvJhgBdRwHjuMIKUZdlt4q
      RelNeeTn9HAxsBcXQJJTLIBNLw+lpnwd3C7OpqJxHBdYShIUVLGIWq0mIthJnejGhRxNZgvM
      cdIm9iN01tk2m01RKcSHa9s2TNPEysoKLMvq6axzV0ORDDw5QxGY7hRvGblcLjHxjAEdoD9o
      JS/nrAMGeipdEASi8o1eHE3T+gzSTCaDdrstjGjZ9RvX2jwuk5PnAiBaDtIm4DmTHAdkdtZT
      EKZpJq4a44KD/4hsNnvBSX8A0Ov1ulhqWZOaSqVw+vRp5PN50dlYniivKAocx8Ha2hosy0rs
      cwNMt2yOHZKHeX6ofpHoooYwAEGAXDGo0tRqtb4IMCVuKpXqG+6WdC9ywloY9prmptPpPrcx
      t+Fs4FQqJVRMWaprmiYY9tChQ32zfGnDTLIKyAxH1ZH3H31OFxJ0OQmOCVYkeFndCMMQdruO
      J57+Hb5w991AuDlbq1arifB5tOJKNlInZYZoYfa4XgraL3zpcfuQuMnwTESTA1XNZlMYpPLK
      Ztt2bC8euW6AjBpdEU3ThG3bIuBIuyaphxAT43jNPBfTJEYhDEOcOnVK5Dsxas7OF3J7mAsR
      ulzTqus6lpeXBzaiVH3zrXdgOyZcP0TOMESODxPLlpeX+5K6ZCkcZYYkyLovdW0aqnRVym3c
      h4ESjmpGHING/2fymeu6wuhnHTJXhmFpDPK1JQUESfyZTEY4HJLuJeplGyWx44SMZVlotVpw
      HAd6Rkex3JvaQ5ew3JLyQkNfSWRSNBXoxQiuu+kWrG+si++4pKbTaeGlYCYmE+yYJTpMwjAF
      gMQjG6iUVmQselLi4gCy754uW93Q8cL67/Di6edxcflSfOnD9yHoBqIzRfSeySRs255KpcSM
      rlE5TNy32+2i0+kkpowAEHUUo5iYtsgkwzFkQbO2tiaEVCaTwfvGG1jfOIPby19Cq9USBfQX
      mvFL6MOkD7D5MKNLNKUSpfTKygqazSZOnDgBVVWxsLCAfD4P27bFgAm+OEZGZbcl/5dXEK4c
      1PmjeToy40aNXtd1sbS0hBdW/wkPvvpdAMDb1T/BDRzcc/SrqNVqsWoHsy8tyxLSWdbtZZ+5
      /HzYDVouGRzWfCqpNUkckmYIR0GPFoVJGIZivgKZPYOP4tKsjRRSWF5eFg3CLlSMVCJlr8oL
      z/4CL7/yGlarIe68+3ZklU1vkKJsDrOQR4wyOioncxWLxYEAD6Vr1HilOsLqKJkQhkVr2Uv0
      7epbfZ+/XX0T916qo1QqiZkHMngfmqaJOtho4I8/lMqKogjiB9DnRpZVIqo/k0xd4YpCaJqG
      bDY7sLKwWKfVavXdC1cQPr8y5vqY2HXdqVfP7SUMZQASI339t95xD2694x4APf2aqROsZmJj
      Wd/3sb6+jlwuhyAIYlubR9MOhkk4uicnKTqninHN0nV45v2nEKJ3/GuXbxCtAVk/EAfP80TM
      IOqq9H0f3W43sU42n8+LuEQ0WJbL5cSknXFWgDDcTK2WCT9qEMu1GOzxz7yjqBEd3f9Caoce
      RWxnOIKNrDqdDg4fPtz3oFhyyOIOJp0R3W4Xa2trmJ+fj1WfgOEtEOW/t9KESahauoZXqy/h
      5dUXcHH5Unzm0rvg2r0lX54jLKcoh+FmaaGcEs5rjjaOjTPIuT+ZgG5UMj5rK0YxQZwbV1b9
      mM1JhuV3juOgUCj01LnqcTz65D8jcDv48MfvhHb8ZbxhBSjm5nD3XZ/GfExF3IWCoQzQ6XQG
      GiWRQFhFJKsmsl5vmiYajUZsNVjUGxPX3jC6fVzFWhLkSi5ZZZFtB5mgm82m0NkZ0OKUlqiq
      QuPccRzxTKLFL9TFadBrmgbTNAeOlzT9Joo4g5+MyG4bdEQ0m02x6tDA7SXohTj51st47UyA
      5urb+Nw9X0a5UICmKrEloRcKBp6+TCjNZlMEaWSpw5dBHzKTw8IwFNtzhpWsD8uIU3mS1CAS
      p5y3MqxeNU6/lpkh+nk2m0UYhsLwpQcnej1yOgUr5OKkP+cWRyevkPHl5zfO5Ms4gUDvGHv2
      yMxGG4PM2u128MLTT+D519/DHfc+AHVewesvPY/X3/oAf/m3f40Ll/wjDCBLymaziVKp1Kdz
      yi+6XC6jVqsJQmAwh+7Per0u6mxlBhhmuA6DnNdDvVbu+sDUBlVVYa4fx6NP/h6BZ+Pqj38W
      7slX8f5aE2F+Cd+4+xY89sPH0A19lD90He689dq++2c6M1MYaAeQaJkdykKWaEtDOcAmM0c6
      nRbTN6n/j7OqcYVJeh6Ksjl9nvUGss0ShiE6bQs3fPrzuOHmdXzv8d/hnjtuxZXXzsM/+z9Q
      tYHpz//ZOxAMEH0J8pRCmfhlvXdubk50EKtUKn1EyGatct+cSeprh0GeYcZjsi9moVBAbuFD
      eOCBo1g99ipefv8Y2paCB771AJ76/oOoBnnc+8ADMOurePRXLyMMrxHXJrcSkd28NGhpy0SH
      cMspDjQ+KZllu4kF8XyGdCSMEw+QwVWYMwXIkDKjyug01vDrX/wBgII7bvsszh5/Fc/8eg2F
      Q9fjQ/EB6AsGuiylHMfBxsaG+DLq845iY2MD5XJZDLVmAIwpvnLH52i966iI5riQXzhzhdJp
      Ay88/QR+/+ox3Pm1b+H0K7/C937wj6i/8ycc7Shov/3PeOqZ3+Oqj9/ddw1RySm7aRmBlg1n
      uVUg0Fs1WNzCWmD5+dHdy+3DMBQzlyd1RUYN8GGq1PyRy/G1I5dvfrD0KVxz00Sn27fQSeRr
      a2sAgPn5edHGI04HlkHDly+AkVP6rVkvXCqV+ghVlrJTvRlmsVodfPTTn8cNH6vhez//Pf7F
      fV8DEODHD3o4lOlAu/JG/KuP/Bm++93v45PXX9JH5PI9UrIzr4fu3qQBFCR4toBnkFAmUo6G
      ou0U7aI3CVgiGdeBgmAs5gDx0IGeJJeLr4eF/AmmOcgpCmxbTn10ZWUF3W4XJ0+exMrKSl91
      FjC7DESztorfPP8qEAK3feqzeOuV3+EPb5/EVTd/CimnjZ89+SzCELju1k+LfWTilyU/J1nK
      /nR5+HWUaWgDRF25ZCYG2GRjfqsp5Nx/1DDxC63QfRIoa2trIUd3RltyxKkGAESga25uTkgf
      13VFSF1uBUKcPHkSmqaJ5Cv2t5wFJnnhruuK6i7eI2sAeH20L6i/U8qzI3SSm1c2hHksy7KQ
      zWaFx4bBrWFSPAnRFI0DTA7lnXfeCZnrEyVI6qvRF8M8Go47ymazImeefmkaiZSi9FpomoZ6
      vY4wDFGpVBILQsZFnFcpSpRyXlF0W7Yz4XWQidmOnMTM1iqu6wq1gt+RGfismIUq2z08Nwld
      ri3IZDIDauIBdgZ6sVgUnZ35wuWlPaq78+VSd5V1WW5DfZk5QOxjSaKcm5tDGIbC4F5YWNjW
      TbiuK/oVsUUij8lUAXp5+Bl/y8xA4mSHZiaVMRcpWgcgBwd93xfBQXqp5KZXZCw5NZvPi/GE
      A+w89Gq1inQqhdD3YZ/LjWHueC6Xw9zcnKgVNU0T3W5XNGVigIqjRtl7h4lj2WxW2AqsK5Z7
      jM7Pz8OyLFHyN8wnLtctyJ+xgIfFO7wOpnAwsGUYBmzbThzNykIYSv5arSZWNXqXovPImA5O
      MN4hG7780XVdZHXKTCfHNw6w89BVVUUxm0LznT+icvXNqFarAHouRU6CpEQ3TVNUfskvMZ1O
      ixA8CYgEQGOYo3dYfEFiZRfiVquFWq2GbDYrGI5S3fM8tNttaJqGXC4nvue1yW5cemDY3Y55
      //IgCTmmoSiKsAEcxxFGOpk1Kq2jDMp7ldUsWe+Xf1h8T2nPVO+tqIDD3NMHGB/K2tpab0ie
      5yBQ+91xjuOg0+mIRCu5LUqUKOgh4UyAuJdDvzdVCfrFqQJwtWDgCegZpPPz81go+gjUHJpt
      D7Vara9JFAmf7lvDMHD27FksLS2h1WpB0zTRPUJOG+A1kehlBohuw31ll2XUc8SkwKj9QVWQ
      zgKuCPPz8wNdLg6ws9DFi474otk1YGVlBUD/GFOZ+Al5zoCc+BV1EZZKJRSLRcFYrCSrVCqC
      eGhfsLlVKpWCjwCuG/apVjJ4TDl/SdM0VCoV1Ot1cf50Oi2YS2SMnku35j7U7WUjlraELOH5
      E61lkJ8TGU52F/O7C7EZ7fkGvdVqIZMrIJs24HRMbLQszC0sQMG5PJJOp88lCAwOpZBBT4rs
      LYnbhrUCTEDb2NgQgSa5pLJcLp8b37mZfclODdTJ2eiKrV2i54xeL9UqnsswDJimKVQyInrP
      ciQ3qgZSJZFVExrH8vXQXpHtoQPsHtQTJz7Ad7//EPxOFQ/+4Cd4443XcHajF9CiChHnr48j
      fkY/S6XSyDpgHoMr0NLSElZWVlCpVESatZyazG7KhUKhz9NCIuP/UeKnihM9ryzRgc0Etbie
      QvJ+juPAtm2hpkUL/+XU7mguEEHj+kD67z7UKy89AkMJ8KffPIPD114D6HnMlza7EquqGltm
      Fwf5hZumKQgvqhoQJFz5e3ZRVpTN6YmHDh0SaQW0E5iXQ1Wq1WrFtipptVoD7k96r6KDKmT3
      qO/7okMFVSVmvHIesMxYZH7eL48RV08QtR1mFRA8wGiov3v5bXz1699Aq2HCV9O4ZEnHw489
      BaD3clg7mxRxbLVawr2naVqfD922bTFgr1ariWZM1I2pHlCVISFQfZINyLqtouv1/t/Y2BD9
      9EnMcdFnTrdhgynek/xbBgk9WkZIRpVXNU5vYVGKbOTKvXxkppO9WPyOnqoD7A7Uj/3ZtdAC
      B9d8/CpsrLVQrszB0FVBoO12GxsbGyLYZJpm38xfvmwSNolQVVUUi0Xkcjmk02nMzc2J2mDT
      NMV+pmnCsix0u11R1yrr0JVKBV0vxH999I949XgDi4uLKJVKMAxDpBXIqowMjkiK6uryjwx5
      GDdVKrnQRBYAjFkwSEZGlBmMUzTl5yG3NGQR+zi5VweYDZQnn3wyrFo+7vrUx3Ds9Rfw9sk2
      br/zdvgdU7T2kzuX0TCm+47Zja7rolgs9ohFVWHbXQRh0Bd4oloh59KQaGQClhPtGo0e0Vdb
      Dir5FNqthigkYVqF7/s4dOjQwOq0uroqKskOHTo0ePORFY0rABHV33mNUc9QXPsTHpfepUql
      0td81vM8NDdq8IIQc3PzF3Rh+m5CWV9fD+PScanzJgV/GDkNw15XgWq1ClVVkU/l8P7Tb6BT
      M3Hk5kuRv2we9XodKysrIk2BeTOe5/X10ZEL0ZlolgQG5uTu1LJeLYNztuJWiWgtr2maA3EA
      Hjt6fNnvL3uG+D31fU51kZ+jaZpw338OytJHUFq86MAg3iXonP8VB9mXLYMRzFar1VfNpOs6
      Tv3+GNbfPA0AeOsXr+KGf/FJ0axJ9p1zeybTkWh83+/3IIUhXM+DrhsIAw+u5wOKCkPX0G63
      +/R+Q1ehm6cRpEpw1JyQ1KVSCSdPnsTRo0f7CI0rEtU9+uzp4aHXKco4tE/kfCm5BpfBONoN
      UduEgbvw8M1QzuUeXci9eXYTOgM/URQKBTiOM9CSnC8/Wg3FDgernWNi29APAD/ERRddJCS8
      7P5jIIyGLgDh3aGPvHHmHfyX/+vv8O//z/8Df/zxg2iUFjFXXMQnbv1o3yDslK4i/ex/hvLu
      LxGmCtDu/E+wKteIFUpuzcJEvHa7Lca+UlLzOnjvUd8+sDlaVI7iqqqK+tk1dO0Orr7+o0NX
      L3qL5OL4A+wOEkuRGKSKljEahtE3u4rEQdfk0VuuQPNkDY7lYOWaI8gvl+AHvkiSI8HQVZjL
      5fq8LrlcTujVod/F08+9ik/edB1CAKdcB7dfdz2WlpcRngu2iYa1jXehvPvL3nU6baivfhfa
      Z/6zIK5UKiUa+LI788rKilDPCE2xAChIp3NotVpileF5uFrI9cFsCJY65xqlV0t+blG88fyT
      +OOJNsqVJXzus5+a+MUdYDpIZADDMFAul/tm/8o5O/TAkCCYFp1bLuLj//Yu+LYLo5AW6g+N
      WnpZmJlJVYKSnG09dF3Hs4/+A7KHLkfj5WdRqzfwudtux9raCTz68CP45t/8df+o0HQJoZaG
      4p9zKeaX+1yQhUIBqVQKZ8+eFbGBpaWlPmLtqWe9lUdVVCwuLsJxHOG9od3BdoKZTEaMkxXe
      Hk3ri5sk5UV98F4dd993Pwo6oB2o/7uGocWout7roSlXMfm+j2azKdKE5Ya2Mox0TwWIdoWz
      bRvdblf4wuXIqZw6rCgKLrrqBqjVJk6aJsxWEyoUXPfRm/Dea68CWkr0GAUAN7sM9fb/Ffjj
      3wOlD8G98d/2BapYoOP7Pq688krxeaVSwfr6OhRFwaWXXgpgM2bALg68HkaaOaYoGszi9Qvp
      P8SwLS4W8OvHH0Gzo+Bb3/zqsNdwgBlCsSwrnMQAazQaOHXqlGi+pOs61k++jd+9+AauveXT
      uPLIHF747TOomQ4uv/ZmXH7RPNZPfgB9bhmVXFoEw2TDF9hMi8jlcsjn86LZKwCcPfEBioeP
      Yv3Yq3jx9XdxxfUfx7WXH+5LcyDxyYaoDN/3cfz4caRSqcQCHDlgBkBUukWPI2eMVk+8hR8+
      9itoWgi9cjHuu+sTeOfFp/Hffvkn/O//8d+hUiwOGNGdjgXbdqCqCn79+Pdx5Z9/HR/50PaK
      gg6wNUzcjiCTyYBTZSgBO76OL937ZTz0D/8dy1/5It4+o+K+L94G3TBw4s0X8Ogjz+FT3/g2
      KpdsDpiT0wSoAjEHKKoyLB39EADg6FU34OhVNwDYjKwmJeRFXbuapuHIkSNYXV1Fo9EYaAfY
      6XSQcjfw/Z89i5Tqo3D4I7j/7k3dnFFppngwyKcXl/HAtx6AWX0fP/3dMXjWWbxy0sPVH5ob
      8hRDPPP4j1G1A4TGIm6rXJjDKc4HTMwAcerOYjGDR374EFLzVwFmA2u19/HEL9r49Gc/hyNX
      3YR77vBgSvvTfcjRpZqmDfTLZ9pzEhRFgW028Yuf/gQbpovly27A7R/7CDy7gb/77qP4q3/9
      bfzh6V/ivfUNpEqH8ZW7PoUwDLG8vIxmsznQbbrb7cJYPILvfPtbaJ55C794+Uzf+eSeScwg
      JV5//mm88oGN++/7Ah598H/g6lvvxNNP/Awt00blnJepHypuv/ur4Pp3kBO6e5i4EDWa4w8A
      +YXD+MIXPgOz+gH8uavwP/3td/D522/AY4/+IjaIRp87OyLIc8oIOWEt7scwDCh6Gnfecx++
      8Y2v49TbLwFhgGd/+UtYAHwouOm2z+Eb938TwdoJmEBfrEFeIcTURQCv/PYJ/Pz3H+C+u2/r
      ux55tSkUCmJ/t/4uXlpV8e2v3420puL6m26C06yi0Wig3YnP8dE0Dfq5YKDc5e4AO4+JVwCq
      HptT0bt48tGnoOQyMB0fjdPv4jevvQPNb2Dx8A14//WX8NSzv4VdehfFL38JRSMQrbs5hXI7
      BeFnjr2GH//0cVxyyxex9u4r8Jevw6H2KwAUdBun8OAPf4KgcjnygFiF5CQ0SvN6vY5U9yRe
      b5bx7a98fIAhNU3D0tKSyPERBrCWQ947i4ceeghLl34Et93UU9Eqc/O4aDG+7SxrGdbqZ7Bu
      nsWh/EUDmakH2BlMbAQDvUZarNfVNA2B78HuOkhnczA0FV27Az9UkMtmEPgePL/nqdENA91z
      2aJJUdZJ0G634XsegsDH33/v+zi6XEDb1fHcb57Bl77zt/jkdZcjDEP85of/Hy655y+xgF5Q
      b319vddDNJfrn5LYOYtHn3oeqgJcdNUN+Mwt14+s2pJn7cahGGMEA8B6Yx3/6Rf/G9baq/jS
      1ffhL276qwt2UN1uYksiR+7/EwQBjFQaRmoznSKT3ewGrekGNOks1PenUQ7odKr4yUNPQM3o
      KC1fitvv+gQUAOV8ATd95EN44tEfouMbMMM5fCIHeLYqCn3ke6EbMzd/Mb75jYvFdyzJjJsC
      Q4wSHkn7md02Nuw6QoRYbZ2KHbJ9gNljSysA8/vpzpRfMgNccn8dJr8xwS3aO3+r4GSU3p0o
      iJLapptVARCK/kdxXR7kBDe6aKvVKubm5rCwsDDVCi56lH79zpM4Vnsbd15+Ny5fueIgI3QX
      sCUGCIIAq6urME2zz3sThqHIn2GuEINlcleJaaHT6QzNpWf2KdMTmOxmoY20P9iNgTlCnN4e
      hr0h0xdffLFggq2Cc8UIOdtWnqxDjMqGPcB0sCUVSFEU0d1NThRjtJU1BEQmk+mLnE4LoxjX
      cRycOnVKJLppmgYogBu4yKqDrSB5X2trayIeQcap1+t93e0mBWsH5HPJI2Hl74BBV+sBZoMt
      MwDdkfJIVLZHHzjJEB16lqC3hjYHsYjlvu1k1Yj3Qg8RVSw20d2OoRoGHl74zc+hHbkFN16x
      jOqpd/Cr376IuaMfxp0fvxKPPPQzKJk0rvqzP8f1l1+05fMcYHxs2e/GZlNsdAv0GIM9fpiS
      APQyKHej/Z+qqpifnxfR5yTIpZidTkdUmjELlEwRnQ45KRprJ6HqKaw32wDm8ZtnX8aXv/4N
      GEoIp/4+3IVLcN/tN55XxTHR5r77DdtyPNPYlSe9p9NptFqtXpoAB1acawm40y9WUXpdrzuW
      iZd/+xQe++e38L/8z/8OGyffxuPPvQyv08S1n/gKrrm4vDlIulzu6+Vfq9XEsbbrqakcugTX
      wMIzqwCcDbz1+vvw8SBsFPClO66Fs/YufviDt3HNrZ/FTR/+0BSewPYQhiHWV18HoGDp8DXn
      FWNOC9tia3p4CE3TUCgUxHxaZn7OKsAzTjF5JpOBkUrh8us+hhuu6qkV5YuuwAP3fx03X3cx
      Nmq98JhhGFDdzTJGuYkvMdXCFSOHi6+6HPc/8G1cWumikz6Kb33rm7j/vs/hD8+9Mr3zbBPF
      yiUoVi4eveEexbYpUx4EAWx2VmC6NICp+PzjMM4xe2qYgmJpMydHQYhnn/op3jx+FrfdfYvQ
      /V2rF8yjPSC3NeeKsB2sHX8DT//6WZwydSznv4CrL8nh+9//R6jpEq5sH8f3n3gZimfjIx+7
      UzTs3WlDmL2UonDHqHHYi9iSG1SG7/tYXV0V2Z38TWPRsiwcOXJk16KcLGIJggCP/PQR3PvF
      e9Go15Avz8FrncTDv3oN3/rqF/r2cRxHzEwrlUrCmC6VSgPF7ePC8zxRPLOJEJ7nS12oA4Sh
      AlVVRDeJaJLgrBGGvRG5wyC3dtnr2PYKoGka5ufnUa1WRaVUtK/PbrrzFEUBAh9PP/EImvUW
      fvTwL/DxWy7Fr57+NaCl8Pm7Pj/wMtvtNnK5XF/NQnTE6VauQ3Z78jiaposEwZ7qpfY5FXYD
      odfBE489irWghL/62hfw2pM/xcstD8V0EffcfceuXNOsMBXlnH7+RqMx8NLYMnBXE71UDXd8
      /it9H933tSvE32EY4OmfP4z1tg9HL+Krd30KlmUJtS6TyWw7b4n2EVVGmZm63a6Yr8DVWO7F
      tPNQ8bHbv4Dn/ulZAMDr6w18/vP3YK5Uhr5PJD8xFapUFEWUCkZ75ZwPXZDZvS2JCR3HwR13
      fw1dcwM/+PHjyOVyoqUi25tMQxrHBbyAno1UqVREtRyjwPSu7TQUPY250uaz+vhN1+PY66/i
      5VfewLf/zb9Baci+ew1TE8usDZYDY5yaLjfD2mlQ4pKo4wjZ8zxUj7+Jx558Brnl3sogN+md
      BsJwc4BGXJ8hxirYOIANA7Ybe5jChSNdWMCtV1wL/8y7qFoh9lP15tQokkMt+KKio4zY/383
      QEPYtu2ELVyohcP4zr/8G5hr7wGGgUqlMjWik2eZJQmBVCqFTCYjuuKRYZLa088STvMMHvrR
      w6ivV/Hr378Gq34KDz/8I3SWr8NlpQMVKBaqqqJUKsG2bdE1gUEyJn4xILbTYJqGoijxUj0M
      8dJzT6Hp+rj8+luQGkKoWwFrDobZQXI6iaZpomGwoihiRNVOIVVawf3339/32WXX3Lxj599J
      bNsNKkPuic8X6nkeqtWqSJRL6tE5K1CSsnCF0yhlmKbZF+TSdX2qBmi0s1zc951OB6ZpCnVI
      Xi0rlcrErRNtu4uNtoXl+fJEz5vPaxiijQuCIEB7vY5MpbjninqmSonsxiDXDbOgZPXUqdg+
      o7MGbRE20WLimwwG7fgzzZc4jvrCNO1isdg3LpY/W1Edu66L09X2xOoTV8lhP3Fp5N2zG/Dd
      vdficea+Sb6A5ZUVEV3dafClmqaJtbU10S+UMYtZSi3aHcMMaqaUsEsddvUxtwAACdxJREFU
      BQi9QZO6kC3LghIGuPxQr6kZi5BmAc5jTh1dhBf4Aw2Tz3fMnAEcx+n1zzzXdMp13Zm9jGEQ
      iXGdDo4fPy7mmC0vL8/sZbmuK1qpLC4uJqaFR12dbB3D3qmTqoxM5ov+PQvIQm0vDvrYEWU8
      DHx88N47+OD02ZmeRx7AEffSM5kM8vk8fL8nqRzHQbs9uZowCnRf0vMVBAE2NjaErRFXiCNH
      z/P5PBYWFkRB/VYYNAwDPP7Q/4tf/e6tqdzTKGycegP/5f/+73D3GA/sSHj2pWeeQENbwGIl
      gH9kZfQOW4TjOGIuGCuq5DRsqjssilcURURgp+WdCoIArVYLnuf1TZuRZxPTwB5G2HI+1VZw
      +q0X4eWW4G9YozfeJsLAwVPPvYEjlTR21mG7fWxpBTA7JlpWc0zJGeC1Y+9Bc5vwFG2mSw4N
      WHpUNjY2+uaZAZuNvXRDx6nOByKBbxowTRPHjh3DCy+8gPX1dTQaDTSbTTEHLJvNipSKWerI
      nt3Ab146jj/78EXodrsIZkyVLz79c1xyw62A58CJiXSfz9gSPbadFjbs2phbB+jYLq6+7kac
      ev13+KDWGb3LFqGq6sAsrlar1ef5YUqEAgWLueVhhxNIUqlkMNgFABdffDFc1xWNv0j4W80k
      nRSebaFSKeEPf3gNx959C/asnTPpIlqr7+DYe+/hg9PVGZ9suphIBfI8rzcZRckhq+dgmuYY
      L1XH0eUlnG20oGoGDH22uS2qqooa4EajIQraZenLoRxp9OIBvVTkZF/9KB9+GIZiHCwzSNvt
      tvDeGIaxo56RTOUw7r57Gd32Gi79sI/cjJNxb/7kZwAAC4USPnzJ4DDC8xkTrQAMdPGl8+9R
      +PyXv4Ju9TSuuOl2HC7NNlDCa8pms4I52QqRHhkSotNpo91xBgJP44DBq42NDTF0g2g0Gn2B
      K3lu8HYxiVcnXVjG1Vcfnsp5x8F1N/3Znhv2MbEK5FgN/OS7/xXPvbU+9j56Oo+bb/0Errp4
      dgYwIQ+sKxQKwuXKCGez2ewRUeDhkYf/Gx575Hl4njeWN4jFIhQAzWYTlmX1BffoAZKNajbC
      2q63iYw0ilk5fpY/s0xFp7Eu/+wlTPxk7I6NG2+8Hm8540k0pkkTs1YD5B5FbIlimqaQ0JZl
      IZ1O4e3nf42Lb/wUjr9sQdNUBKuvwM9/ciix2LaNEydO4NChQ2LajG3bsCxLeJ4sy4pVd+gV
      kjNS49yh/Jwd9uQimmazORZB72QHDrmGYS9iYgYoLaxAt04Cw6vmBCiNdwNMP85ms30S3req
      +OWL7+Ezn74Cp0+fhuOryJQODZWs7HpXLBZx8uTJPmKdn58XEn5hYSGWyTlaivPPfN9Hp9MR
      s5LllGf2IIoSMke67jUpez5jX/fjlnNqMpkMOp1Ob2Uw8vji3Z+F766eq2NQkVu6bCijknls
      28bCwoLI06ddwXwi2iBkJk3TxOzjcrks8v1N0xSrFAeP8zysP45eD2sq9muPnt3AxAxw6tgf
      8dt/+iOa3lt4PfdZ3PrRuAkouw8SvkxQ3rnRqoqewWWXXYYwuAiVyrVQAhdhmBkqXVms4rou
      1tfXRVljt9sVLk9z7QRUPYUOegPAgyDA0tISXNfF6uoqlpeXcckll4iOD7QT5DiEnEkrg5M2
      5ZprGuIM+kUjygcYjYkZ4KLLr8M3L79uFtcyM7A5bqVSEY2uAEBR01hcTo90gwKbWaXU9QuF
      AlzXFfOPVcfCcz/4f2CkM7jtb/4DbKdnfDMXqljcTBWWCZ4F8VxhkqrWwjAU+8vfM2eILl+q
      U9lsVhTWeJ63a+0pz3dMxABx4fm98FDpgiRhWJY14Ja0LAuVSqXPwIzeWyqVwqFDh0RkN51O
      o1gs9pgnyGDu8MXIlSrI5vJIZXoqkKz6ABAxAs/zRLGQ4ziCucSwDglyqWT0mtiGniuO67qw
      bVtUlhFcQaLHvdAx1YKY8xWUsKxZXl9f7zN4qTqwFYppmqIgPu5Y9Xp9IH2C6cuUuExr5jwx
      HsvzPJGSDUDUAVAdok0gEzuZR64P5nlYsO+6LqrVqrivSqWCfD7fF69hEiCzTBkxn4QRRq2U
      ew372ggmmGdPKZhOpwdyhIDeKkDC5ewDYFN6klhGTY2R05s5n4DM4ThOX98fXpdMiHI6tPw5
      mSjayZrMVy6X4Xkeut0uut1uTzU7J/Uty4Jt2yJm0Wg0YJqmaBbg+/7AsJM4JKln0XvYK0xy
      wbgTZMOxVCoJF2NUAnY6HdHPlEOxObAbgEilUBQFTqeB1958FwDgOyaeePRhvPSn4whDoNNY
      wyM/+iFe+tPxvutg2SNVI8YO4lYUMgHVpSAI0Gw2Ua/XBQFHK+xs24bjOOh0OqjX66IjXd80
      nXPwPA/NZhPr6+t4//33sb6+jk6nIyLj4wbu5Gc4bnbA+YILYgUgZMlcLpcFgUSXdU3T+nKc
      okO1M5kMumYNjz/+G9QcF9d++DL86mc/xhWfuBevP/kTrFy0iN/+7Enc/bVvAm5/fW2xWIRp
      mkLKMxuVhnpcuSFbtqdSqQFVSTZwM5kMbNsWcw263S6q1epY2a60R2q1Wt9EHx57lETnSsOa
      5r2yElwwK0AUhmFgbm5OqEeyWjKWn13P49777sV8oaeWmHYWRxeLuOHKeXxw7E388e11/PRH
      D+L3f3xX7EJPElefdDoten+yhiAKzmFgu3m5TJKtVGRiK5VKmJ+fx+LiIvL5/Ng5TrLUZplj
      tVrF2bNnB2arDQOZ2bKsPVEhdsEyANBjgsXFxYF+pltC2FtJnK6CVCaFD197I775F99B9/Qf
      0JYcTpSQlJK6rgvjeysJc/L1yk0J2Fh3eXkZi4uLKBaLE7lC5e7Y1Wq1Tw0cto/rumg0Grvb
      zGsCXFAqUBw0TcPc3BxarRYsa/zqKd+q4ZHHn8bzL72IXPEILr+0hAd/8CNYzRa+89efwwcv
      /R0eebSBejePTOQpyyoX55cxoDUtUGLrui5WC85taDabA2rRKOne7Xb7WsWQQXge2irtdhvF
      YrGPAaJG+/mEC8INOg4ovdjMi6qQ7GmRETcgu2O1YWTy0NXeWFazbSKbz8PQdRTONQUYdn5g
      ejqz4zjodrsoFvsj9bQp6vV63+e1Wg3z8/NDj8kJQOxg1+l0hNHM70ul0kAwj8l90+yzOi1c
      8CsAwXphuSUhmYAFLZt9/HvEGjWeszmZyBXkRxB99PzTRJLOzvtMp9Mi/yguwBYHJuPZto2V
      lRUUi0VhZzDOEreK8Tk2m02R43S+rAb6tAo19gu4lBuGIVo6+r4/MAGThqHcJW3YaNO4uMMs
      wd5HceeVew/x73G7ULNrXlyf1VFNz9LpNGzbFl2vz4ekvv8f09PT7xFxZscAAAAASUVORK5C
      YII=
    </thumbnail>
    <thumbnail height='192' name='Sheet 7' width='192'>
      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
      /wFWo0L10nc/UwAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='29' name='Total Number Of Fatalitites' width='84'>
      iVBORw0KGgoAAAANSUhEUgAAAFQAAAAdCAYAAAA0PEtlAAAACXBIWXMAABYlAAAWJQFJUiTw
      AAAFFUlEQVRoge2ab0wTdxjHvxri0JIOHAq6+K9bZIGwzdFth8Nu1dhkqwNdCWYUKoGpbGZT
      mbrNRCJqQtAMWNAAC9sg8QVEligCM4pkbJGmWkFwLIBioKjQCShn22Hp8uwFhV3ba7VwAbL0
      86r3/J57vs99r3f3XNM5RETwIRhzZ7qB/xs+QwXGZ6jA+AwVGJ+hAuMzVGB8hgqMz1CB8Rkq
      MD5DBcZnqMD4DBWYWW2ozcLCYpvpLrjYYGEt8NSSIIZaey8hb8cmbCvrcdvIUPt5ZKcqIY+W
      QiqVQrpOgdTMKnRaXbPZ1jLs27wOjGw9ZEw05Ml5aBx6Fme90+HSU7ELsbGxiM3T8RxgJ6oy
      kyGPZiBbLwMTLUdydj36+FqiKTA62ESlX8ZRTEwcJcXLKbG0myfLRPrceIpRbqfcqpt03zxK
      RERPjDepYr+CmPRK6ufW7ColDaOg/VUGejImQk0nNcQojtAVk6duvNNxoL+S0mMyKP/bBIrK
      bHA6yC4q1cRQ/JGLZHhC9prX6KSGIUVmAw07lZq8oXdPk4ZR0vbcMaHu0kQ3hnbT2aKqiWYc
      m9VRtjyBfugaD5jown6Gtpxso1GHxGGqyWBoS1GHh4a80eHST5XpMZRRM0zdpYkuhg5UphOT
      UeNiHA1fpoNyBR3XO3Y6+Us+8H2cuHwW3+/diGXzPCWuQNzOD/lz/IKxeJEFf4/Yt80NuFgf
      ga3x4fBzSBRDEadA329auLupeKXDga09jnzswYEPxLxV21qvYe2Gd+GyKl4PtWoefqlvcQhP
      3lDRQixe4Pf0PA9YW8+j+sE7eHO1PdDehuYlaxAZ4prrF/U21nZ0omsSDykXnXHYWmRlW7Dn
      sAo8khP4+z/HGw+PfAPsH+24x4nN0FPehqHGE1DvrEXk4c/w1vh5MZvALgzE83y7iAIQgG70
      3uNb9FIHAMCiPuc7DKR/DZUHN0OXLof2ahP/k32FBGG999HPCU2/odZeXDr6MZRZBmwqPoMs
      mdPFtHIZXpwGHbY+Bzl3NTiiXuGxzOrNaoSdO4S9Zc34b9Cwgr39O8qKqnGHNcHMyZ/aNesF
      7NUTSNtdh1UHS3Ds0Blo+ZJEARC338YdyCBxXrPZYEMoFgVPVceMxqMf4WD/FnyTHIJbdXW4
      ZV8ZuMUCxhbU1VmBgJcQzayCKESFQq1qLMHKYmAAEAeLIX55HdQbL6Dg0auI4FSfHkONP+Or
      3XUIz+H5RnJZKUFYVyPazYBE5LTWch3aJRKoneNe64yAQmXYOHcQet2gw4rJYAYet0OnY4HF
      87GGWQUHuXliBE+cUBuarmqx/PVteIGb42EO8Qr3Y9Mo6bLlPKMQH/1UnhZFaeXOE+NYDUXu
      DQ/7eqPDD9/Y5JbhGspg0si51Wm4h7ag4aIIG+TOoxAfIVB9uhW9+Qfw48SrjQ1D9Udx6FwY
      diS+5pBtvn4aHZPS8YYetOr/AvdFyzbUjFOfZ6M3JcPlgTZp7Z4yNVQFHU5RFaQF45+VyNVn
      QQYzTGwfKjRS/OSmljJXjyyZvaGovSjctw9fbNuA8kVB8P/nMR6wEqQU5zk1b0R1YT7eK0my
      b3un8+w8wpVjSUgdnI+lQf4ARvDwwSgiUk6hZKfryZtDNDv/OWKzPET3n9fxKDAK4SuD4DLy
      GivwyeZfUaItnJZ+rOwADJ03YPR/BeGSUAS5mcFnraFPo7M4AXnBBSj0NETOALP65zv33IVh
      wS4cnmVmAsC/++ELhwA2a2YAAAAASUVORK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
